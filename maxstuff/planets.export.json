{
  "desc": {
    "parameters": [
      {
        "type": "ParameterTypeNumber",
        "index": 0,
        "name": "altitude",
        "paramId": "mercury/altitude",
        "minimum": 0,
        "maximum": 90,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 1,
        "name": "mode",
        "paramId": "mercury/mode",
        "minimum": 0,
        "maximum": 2,
        "exponent": 1,
        "steps": 3,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          0,
          1,
          2
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 2,
        "name": "onoff",
        "paramId": "mercury/onoff",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          0,
          1
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 3,
        "name": "magnitude",
        "paramId": "mercury/magnitude",
        "minimum": -2.48,
        "maximum": 7.25,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 4,
        "name": "fb",
        "paramId": "mercury/fb",
        "minimum": 0,
        "maximum": 0.9,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 5,
        "name": "cut",
        "paramId": "mercury/cut",
        "minimum": 0,
        "maximum": 22000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 6,
        "name": "del_time",
        "paramId": "mercury/del_time",
        "minimum": 20,
        "maximum": 2000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 7,
        "name": "q",
        "paramId": "mercury/q",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 8,
        "name": "azimuth",
        "paramId": "mercury/azimuth",
        "minimum": 0,
        "maximum": 360,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 9,
        "name": "elongation",
        "paramId": "mercury/elongation",
        "minimum": 0,
        "maximum": 28,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 10,
        "name": "tempo",
        "paramId": "mercury/tempo",
        "minimum": 100,
        "maximum": 2000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 11,
        "name": "onoff",
        "paramId": "mars/onoff",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          0,
          1
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 12,
        "name": "tempo",
        "paramId": "mars/tempo",
        "minimum": 100,
        "maximum": 2000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 13,
        "name": "change_inst",
        "paramId": "mars/change_inst",
        "minimum": 0,
        "maximum": 5,
        "exponent": 1,
        "steps": 6,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": "change",
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 14,
        "name": "magnitude",
        "paramId": "mars/magnitude",
        "minimum": -2.94,
        "maximum": 1.86,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 15,
        "name": "delay",
        "paramId": "mars/delay",
        "minimum": 100,
        "maximum": 1000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 16,
        "name": "elongation",
        "paramId": "mars/elongation",
        "minimum": 0,
        "maximum": 180,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 17,
        "name": "altitude",
        "paramId": "mars/altitude",
        "minimum": 0,
        "maximum": 90,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 18,
        "name": "azimuth",
        "paramId": "mars/azimuth",
        "minimum": 0,
        "maximum": 360,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 19,
        "name": "altitude",
        "paramId": "saturn/altitude",
        "minimum": 0,
        "maximum": 90,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 20,
        "name": "mode",
        "paramId": "saturn/mode",
        "minimum": 0,
        "maximum": 2,
        "exponent": 1,
        "steps": 3,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          0,
          1,
          2
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 21,
        "name": "q",
        "paramId": "saturn/q",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 22,
        "name": "cut",
        "paramId": "saturn/cut",
        "minimum": 0,
        "maximum": 22000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 23,
        "name": "onoff",
        "paramId": "saturn/onoff",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          0,
          1
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 24,
        "name": "azimuth",
        "paramId": "saturn/azimuth",
        "minimum": 0,
        "maximum": 360,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 25,
        "name": "tempo",
        "paramId": "saturn/tempo",
        "minimum": 100,
        "maximum": 2000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 26,
        "name": "magnitude",
        "paramId": "saturn/magnitude",
        "minimum": -0.55,
        "maximum": 1.17,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 27,
        "name": "attack",
        "paramId": "saturn/attack",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 28,
        "name": "elongation",
        "paramId": "saturn/elongation",
        "minimum": 0,
        "maximum": 180,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 29,
        "name": "magnitude",
        "paramId": "neptune/magnitude",
        "minimum": 7.67,
        "maximum": 8,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 30,
        "name": "elongation",
        "paramId": "neptune/elongation",
        "minimum": 0,
        "maximum": 180,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 31,
        "name": "q",
        "paramId": "neptune/q",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 32,
        "name": "altitude",
        "paramId": "neptune/altitude",
        "minimum": 0,
        "maximum": 90,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 33,
        "name": "azimuth",
        "paramId": "neptune/azimuth",
        "minimum": 0,
        "maximum": 360,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 34,
        "name": "tempo",
        "paramId": "neptune/tempo",
        "minimum": 100,
        "maximum": 2000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 35,
        "name": "onoff",
        "paramId": "neptune/onoff",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          0,
          1
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 36,
        "name": "onoff",
        "paramId": "pluto/onoff",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          0,
          1
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 37,
        "name": "altitude",
        "paramId": "pluto/altitude",
        "minimum": 0,
        "maximum": 90,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 38,
        "name": "au",
        "paramId": "pluto/au",
        "minimum": 30,
        "maximum": 49,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 39,
        "name": "azimuth",
        "paramId": "pluto/azimuth",
        "minimum": 0,
        "maximum": 360,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 40,
        "name": "elongation",
        "paramId": "pluto/elongation",
        "minimum": 0,
        "maximum": 180,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 41,
        "name": "magnitude",
        "paramId": "moon/magnitude",
        "minimum": -12.9,
        "maximum": -2.5,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 42,
        "name": "l_deltime",
        "paramId": "moon/l_deltime",
        "minimum": 20,
        "maximum": 1200,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 43,
        "name": "l_fb",
        "paramId": "moon/l_fb",
        "minimum": 0,
        "maximum": 0.9,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 44,
        "name": "rand_del",
        "paramId": "moon/rand_del",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          0,
          1
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 45,
        "name": "azimuth",
        "paramId": "moon/azimuth",
        "minimum": 0,
        "maximum": 360,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 46,
        "name": "r_deltime",
        "paramId": "moon/r_deltime",
        "minimum": 20,
        "maximum": 1200,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 47,
        "name": "phase",
        "paramId": "moon/phase",
        "minimum": 0,
        "maximum": 360,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 48,
        "name": "onoff",
        "paramId": "moon/onoff",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          0,
          1
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 49,
        "name": "altitude",
        "paramId": "moon/altitude",
        "minimum": -90,
        "maximum": 90,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 50,
        "name": "r_fb",
        "paramId": "moon/r_fb",
        "minimum": 0,
        "maximum": 0.9,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 51,
        "name": "elongation",
        "paramId": "moon/elongation",
        "minimum": 0,
        "maximum": 180,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 52,
        "name": "maxtemp",
        "paramId": "moon/maxtemp",
        "minimum": 2000,
        "maximum": 10000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 53,
        "name": "onoff",
        "paramId": "earth/onoff",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          0,
          1
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 54,
        "name": "env",
        "paramId": "earth/env",
        "minimum": 0.1,
        "maximum": 0.9,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 55,
        "name": "gain",
        "paramId": "earth/gain",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 56,
        "name": "tempo",
        "paramId": "earth/tempo",
        "minimum": 100,
        "maximum": 4000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 57,
        "name": "azimuth",
        "paramId": "sun/azimuth",
        "minimum": 0,
        "maximum": 360,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 58,
        "name": "month",
        "paramId": "sun/month",
        "minimum": 1,
        "maximum": 12,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 59,
        "name": "onoff",
        "paramId": "sun/onoff",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          0,
          1
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 60,
        "name": "cuttemp",
        "paramId": "sun/cuttemp",
        "minimum": 300,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 61,
        "name": "altitude",
        "paramId": "sun/altitude",
        "minimum": -90,
        "maximum": 90,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 62,
        "name": "attack",
        "paramId": "sun/attack",
        "minimum": 50,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 63,
        "name": "addtemp",
        "paramId": "sun/addtemp",
        "minimum": 500,
        "maximum": 8000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 64,
        "name": "decay",
        "paramId": "sun/decay",
        "minimum": 400,
        "maximum": 6000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 65,
        "name": "elongation",
        "paramId": "venus/elongation",
        "minimum": 0,
        "maximum": 180,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 66,
        "name": "rescut",
        "paramId": "venus/rescut",
        "minimum": 100,
        "maximum": 22000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 67,
        "name": "onoff",
        "paramId": "venus/onoff",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          0,
          1
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 68,
        "name": "altitude",
        "paramId": "venus/altitude",
        "minimum": 0,
        "maximum": 90,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 69,
        "name": "magnitude",
        "paramId": "venus/magnitude",
        "minimum": -4.92,
        "maximum": -2.98,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 70,
        "name": "tempo",
        "paramId": "venus/tempo",
        "minimum": 500,
        "maximum": 3000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 71,
        "name": "azimuth",
        "paramId": "venus/azimuth",
        "minimum": 0,
        "maximum": 360,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 72,
        "name": "onoff",
        "paramId": "jupiter/onoff",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          0,
          1
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 73,
        "name": "altitude",
        "paramId": "jupiter/altitude",
        "minimum": 0,
        "maximum": 90,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 74,
        "name": "attack",
        "paramId": "jupiter/attack",
        "minimum": 0.1,
        "maximum": 0.25,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 75,
        "name": "tempo",
        "paramId": "jupiter/tempo",
        "minimum": 1000,
        "maximum": 4000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 76,
        "name": "elongation",
        "paramId": "jupiter/elongation",
        "minimum": 0,
        "maximum": 180,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 77,
        "name": "magnitude",
        "paramId": "jupiter/magnitude",
        "minimum": -2.94,
        "maximum": -1.66,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 78,
        "name": "q",
        "paramId": "jupiter/q",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 79,
        "name": "azimuth",
        "paramId": "jupiter/azimuth",
        "minimum": 0,
        "maximum": 360,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 80,
        "name": "onoff",
        "paramId": "uranus/onoff",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          0,
          1
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 81,
        "name": "altitude",
        "paramId": "uranus/altitude",
        "minimum": -90,
        "maximum": 90,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 82,
        "name": "decay",
        "paramId": "uranus/decay",
        "minimum": 80,
        "maximum": 127,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 83,
        "name": "magnitude",
        "paramId": "uranus/magnitude",
        "minimum": 5.38,
        "maximum": 6.03,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 84,
        "name": "elongation",
        "paramId": "uranus/elongation",
        "minimum": 0,
        "maximum": 180,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 85,
        "name": "azimuth",
        "paramId": "uranus/azimuth",
        "minimum": 0,
        "maximum": 360,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 86,
        "name": "mix",
        "paramId": "uranus/reverb/mix[1]",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 48,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Mix",
        "unit": "%",
        "order": 6,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 87,
        "name": "jitter",
        "paramId": "uranus/reverb/jitter[1]",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 30,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Jitter",
        "unit": "%",
        "order": 5,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 88,
        "name": "diff",
        "paramId": "uranus/reverb/diff[1]",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 127,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Diff",
        "unit": "%",
        "order": 2,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 89,
        "name": "constell_gate",
        "paramId": "constellations/constell_gate",
        "minimum": 0,
        "maximum": 11,
        "exponent": 1,
        "steps": 12,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 90,
        "name": "constellation",
        "paramId": "constellations/constellation",
        "minimum": 0,
        "maximum": 87,
        "exponent": 1,
        "steps": 88,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          68,
          69,
          70,
          71,
          72,
          73,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          82,
          83,
          84,
          85,
          86,
          87
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      }
    ],
    "numParameters": 91,
    "numSignalInParameters": 0,
    "numSignalOutParameters": 0,
    "numInputChannels": 0,
    "numOutputChannels": 2,
    "numMidiInputPorts": 1,
    "numMidiOutputPorts": 0,
    "externalDataRefs": [],
    "patcherSerial": 0,
    "inports": [],
    "outports": [],
    "inlets": [
      {
        "type": "midi"
      }
    ],
    "outlets": [
      {
        "type": "signal",
        "index": 1,
        "tag": "out1",
        "meta": ""
      },
      {
        "type": "signal",
        "index": 2,
        "tag": "out2",
        "meta": ""
      }
    ],
    "paramConversion": {
      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_229.getNumParameters())\r\n            return this.p_229.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_229.getNumParameters();\r\n\r\n        if (index < this.p_230.getNumParameters())\r\n            return this.p_230.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_230.getNumParameters();\r\n\r\n        if (index < this.p_231.getNumParameters())\r\n            return this.p_231.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_231.getNumParameters();\r\n\r\n        if (index < this.p_232.getNumParameters())\r\n            return this.p_232.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_232.getNumParameters();\r\n\r\n        if (index < this.p_233.getNumParameters())\r\n            return this.p_233.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_233.getNumParameters();\r\n\r\n        if (index < this.p_234.getNumParameters())\r\n            return this.p_234.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_234.getNumParameters();\r\n\r\n        if (index < this.p_235.getNumParameters())\r\n            return this.p_235.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_235.getNumParameters();\r\n\r\n        if (index < this.p_236.getNumParameters())\r\n            return this.p_236.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_236.getNumParameters();\r\n\r\n        if (index < this.p_237.getNumParameters())\r\n            return this.p_237.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_237.getNumParameters();\r\n\r\n        if (index < this.p_238.getNumParameters())\r\n            return this.p_238.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_238.getNumParameters();\r\n\r\n        if (index < this.p_239.getNumParameters())\r\n            return this.p_239.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_239.getNumParameters();\r\n\r\n        if (index < this.p_240.getNumParameters())\r\n            return this.p_240.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_240.getNumParameters();\r\n\r\n        if (index < this.p_241.getNumParameters())\r\n            return this.p_241.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_229.getNumParameters())\r\n            return this.p_229.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_229.getNumParameters();\r\n\r\n        if (index < this.p_230.getNumParameters())\r\n            return this.p_230.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_230.getNumParameters();\r\n\r\n        if (index < this.p_231.getNumParameters())\r\n            return this.p_231.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_231.getNumParameters();\r\n\r\n        if (index < this.p_232.getNumParameters())\r\n            return this.p_232.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_232.getNumParameters();\r\n\r\n        if (index < this.p_233.getNumParameters())\r\n            return this.p_233.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_233.getNumParameters();\r\n\r\n        if (index < this.p_234.getNumParameters())\r\n            return this.p_234.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_234.getNumParameters();\r\n\r\n        if (index < this.p_235.getNumParameters())\r\n            return this.p_235.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_235.getNumParameters();\r\n\r\n        if (index < this.p_236.getNumParameters())\r\n            return this.p_236.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_236.getNumParameters();\r\n\r\n        if (index < this.p_237.getNumParameters())\r\n            return this.p_237.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_237.getNumParameters();\r\n\r\n        if (index < this.p_238.getNumParameters())\r\n            return this.p_238.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_238.getNumParameters();\r\n\r\n        if (index < this.p_239.getNumParameters())\r\n            return this.p_239.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_239.getNumParameters();\r\n\r\n        if (index < this.p_240.getNumParameters())\r\n            return this.p_240.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_240.getNumParameters();\r\n\r\n        if (index < this.p_241.getNumParameters())\r\n            return this.p_241.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
      "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_229.getNumParameters() + this.p_230.getNumParameters() + this.p_231.getNumParameters() + this.p_232.getNumParameters() + this.p_233.getNumParameters() + this.p_234.getNumParameters() + this.p_235.getNumParameters() + this.p_236.getNumParameters() + this.p_237.getNumParameters() + this.p_238.getNumParameters() + this.p_239.getNumParameters() + this.p_240.getNumParameters() + this.p_241.getNumParameters();\r\n}",
      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_229.getNumParameters())\r\n            return this.p_229.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_229.getNumParameters();\r\n\r\n        if (index < this.p_230.getNumParameters())\r\n            return this.p_230.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_230.getNumParameters();\r\n\r\n        if (index < this.p_231.getNumParameters())\r\n            return this.p_231.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_231.getNumParameters();\r\n\r\n        if (index < this.p_232.getNumParameters())\r\n            return this.p_232.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_232.getNumParameters();\r\n\r\n        if (index < this.p_233.getNumParameters())\r\n            return this.p_233.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_233.getNumParameters();\r\n\r\n        if (index < this.p_234.getNumParameters())\r\n            return this.p_234.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_234.getNumParameters();\r\n\r\n        if (index < this.p_235.getNumParameters())\r\n            return this.p_235.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_235.getNumParameters();\r\n\r\n        if (index < this.p_236.getNumParameters())\r\n            return this.p_236.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_236.getNumParameters();\r\n\r\n        if (index < this.p_237.getNumParameters())\r\n            return this.p_237.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_237.getNumParameters();\r\n\r\n        if (index < this.p_238.getNumParameters())\r\n            return this.p_238.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_238.getNumParameters();\r\n\r\n        if (index < this.p_239.getNumParameters())\r\n            return this.p_239.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_239.getNumParameters();\r\n\r\n        if (index < this.p_240.getNumParameters())\r\n            return this.p_240.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_240.getNumParameters();\r\n\r\n        if (index < this.p_241.getNumParameters())\r\n            return this.p_241.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
      "subpatches": {
        "p_229": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 7:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 2 ? 2 : value));\r\n            let normalizedValue = (value - 0) / (2 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 3);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 9:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 28 ? 28 : value));\r\n            let normalizedValue = (value - 0) / (28 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 90 ? 90 : value));\r\n            let normalizedValue = (value - 0) / (90 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 8:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 360 ? 360 : value));\r\n            let normalizedValue = (value - 0) / (360 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 5:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 22000 ? 22000 : value));\r\n            let normalizedValue = (value - 0) / (22000 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 4:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 0.9 ? 0.9 : value));\r\n            let normalizedValue = (value - 0) / (0.9 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 6:\r\n        {\r\n            value = (value < 20 ? 20 : (value > 2000 ? 2000 : value));\r\n            let normalizedValue = (value - 20) / (2000 - 20);\r\n            return normalizedValue;\r\n        }\r\n    case 10:\r\n        {\r\n            value = (value < 100 ? 100 : (value > 2000 ? 2000 : value));\r\n            let normalizedValue = (value - 100) / (2000 - 100);\r\n            return normalizedValue;\r\n        }\r\n    case 3:\r\n        {\r\n            value = (value < -2.48 ? -2.48 : (value > 7.25 ? 7.25 : value));\r\n            let normalizedValue = (value - -2.48) / (7.25 - -2.48);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 11;\r\n\r\n        if (index < this.p_19.getNumParameters())\r\n            return this.p_19.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_19.getNumParameters();\r\n\r\n        if (index < this.p_20.getNumParameters())\r\n            return this.p_20.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_20.getNumParameters();\r\n\r\n        if (index < this.p_21.getNumParameters())\r\n            return this.p_21.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_21.getNumParameters();\r\n\r\n        if (index < this.p_22.getNumParameters())\r\n            return this.p_22.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_22.getNumParameters();\r\n\r\n        if (index < this.p_23.getNumParameters())\r\n            return this.p_23.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_23.getNumParameters();\r\n\r\n        if (index < this.p_24.getNumParameters())\r\n            return this.p_24.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_24.getNumParameters();\r\n\r\n        if (index < this.p_25.getNumParameters())\r\n            return this.p_25.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_25.getNumParameters();\r\n\r\n        if (index < this.p_26.getNumParameters())\r\n            return this.p_26.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_26.getNumParameters();\r\n\r\n        if (index < this.p_27.getNumParameters())\r\n            return this.p_27.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 7:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 3);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (2 - 0);\r\n            }\r\n        }\r\n    case 9:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (28 - 0);\r\n            }\r\n        }\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (90 - 0);\r\n            }\r\n        }\r\n    case 8:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (360 - 0);\r\n            }\r\n        }\r\n    case 5:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (22000 - 0);\r\n            }\r\n        }\r\n    case 4:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (0.9 - 0);\r\n            }\r\n        }\r\n    case 6:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 20 + value * (2000 - 20);\r\n            }\r\n        }\r\n    case 10:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 100 + value * (2000 - 100);\r\n            }\r\n        }\r\n    case 3:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return -2.48 + value * (7.25 - -2.48);\r\n            }\r\n        }\r\n    default:\r\n        index -= 11;\r\n\r\n        if (index < this.p_19.getNumParameters())\r\n            return this.p_19.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_19.getNumParameters();\r\n\r\n        if (index < this.p_20.getNumParameters())\r\n            return this.p_20.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_20.getNumParameters();\r\n\r\n        if (index < this.p_21.getNumParameters())\r\n            return this.p_21.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_21.getNumParameters();\r\n\r\n        if (index < this.p_22.getNumParameters())\r\n            return this.p_22.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_22.getNumParameters();\r\n\r\n        if (index < this.p_23.getNumParameters())\r\n            return this.p_23.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_23.getNumParameters();\r\n\r\n        if (index < this.p_24.getNumParameters())\r\n            return this.p_24.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_24.getNumParameters();\r\n\r\n        if (index < this.p_25.getNumParameters())\r\n            return this.p_25.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_25.getNumParameters();\r\n\r\n        if (index < this.p_26.getNumParameters())\r\n            return this.p_26.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_26.getNumParameters();\r\n\r\n        if (index < this.p_27.getNumParameters())\r\n            return this.p_27.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "getNumParameters": "function getNumParameters() {\r\n    return 11 + this.p_19.getNumParameters() + this.p_20.getNumParameters() + this.p_21.getNumParameters() + this.p_22.getNumParameters() + this.p_23.getNumParameters() + this.p_24.getNumParameters() + this.p_25.getNumParameters() + this.p_26.getNumParameters() + this.p_27.getNumParameters();\r\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 90 ? 90 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 2 ? 2 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 2 / 2;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 3:\r\n        {\r\n            v = (v > 7.25 ? 7.25 : (v < -2.48 ? -2.48 : v));\r\n            return v;\r\n        }\r\n    case 4:\r\n        {\r\n            v = (v > 0.9 ? 0.9 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 5:\r\n        {\r\n            v = (v > 22000 ? 22000 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 6:\r\n        {\r\n            v = (v > 2000 ? 2000 : (v < 20 ? 20 : v));\r\n            return v;\r\n        }\r\n    case 7:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 8:\r\n        {\r\n            v = (v > 360 ? 360 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 9:\r\n        {\r\n            v = (v > 28 ? 28 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 10:\r\n        {\r\n            v = (v > 2000 ? 2000 : (v < 100 ? 100 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 11;\r\n\r\n        if (index < this.p_19.getNumParameters())\r\n            return this.p_19.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_19.getNumParameters();\r\n\r\n        if (index < this.p_20.getNumParameters())\r\n            return this.p_20.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_20.getNumParameters();\r\n\r\n        if (index < this.p_21.getNumParameters())\r\n            return this.p_21.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_21.getNumParameters();\r\n\r\n        if (index < this.p_22.getNumParameters())\r\n            return this.p_22.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_22.getNumParameters();\r\n\r\n        if (index < this.p_23.getNumParameters())\r\n            return this.p_23.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_23.getNumParameters();\r\n\r\n        if (index < this.p_24.getNumParameters())\r\n            return this.p_24.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_24.getNumParameters();\r\n\r\n        if (index < this.p_25.getNumParameters())\r\n            return this.p_25.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_25.getNumParameters();\r\n\r\n        if (index < this.p_26.getNumParameters())\r\n            return this.p_26.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_26.getNumParameters();\r\n\r\n        if (index < this.p_27.getNumParameters())\r\n            return this.p_27.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "subpatches": {
            "p_19": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_20": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_21": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_04.getNumParameters())\r\n            return this.p_04.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_04.getNumParameters())\r\n            return this.p_04.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_04.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_04.getNumParameters())\r\n            return this.p_04.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_04": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_01.getNumParameters())\r\n            return this.p_01.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_01.getNumParameters();\r\n\r\n        if (index < this.p_02.getNumParameters())\r\n            return this.p_02.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_02.getNumParameters();\r\n\r\n        if (index < this.p_03.getNumParameters())\r\n            return this.p_03.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_01.getNumParameters())\r\n            return this.p_01.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_01.getNumParameters();\r\n\r\n        if (index < this.p_02.getNumParameters())\r\n            return this.p_02.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_02.getNumParameters();\r\n\r\n        if (index < this.p_03.getNumParameters())\r\n            return this.p_03.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_01.getNumParameters() + this.p_02.getNumParameters() + this.p_03.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_01.getNumParameters())\r\n            return this.p_01.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_01.getNumParameters();\r\n\r\n        if (index < this.p_02.getNumParameters())\r\n            return this.p_02.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_02.getNumParameters();\r\n\r\n        if (index < this.p_03.getNumParameters())\r\n            return this.p_03.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_01": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_02": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_03": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_22": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_08.getNumParameters())\r\n            return this.p_08.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_08.getNumParameters())\r\n            return this.p_08.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_08.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_08.getNumParameters())\r\n            return this.p_08.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_08": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_05.getNumParameters())\r\n            return this.p_05.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_05.getNumParameters();\r\n\r\n        if (index < this.p_06.getNumParameters())\r\n            return this.p_06.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_06.getNumParameters();\r\n\r\n        if (index < this.p_07.getNumParameters())\r\n            return this.p_07.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_05.getNumParameters())\r\n            return this.p_05.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_05.getNumParameters();\r\n\r\n        if (index < this.p_06.getNumParameters())\r\n            return this.p_06.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_06.getNumParameters();\r\n\r\n        if (index < this.p_07.getNumParameters())\r\n            return this.p_07.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_05.getNumParameters() + this.p_06.getNumParameters() + this.p_07.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_05.getNumParameters())\r\n            return this.p_05.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_05.getNumParameters();\r\n\r\n        if (index < this.p_06.getNumParameters())\r\n            return this.p_06.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_06.getNumParameters();\r\n\r\n        if (index < this.p_07.getNumParameters())\r\n            return this.p_07.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_05": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_06": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_07": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_23": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_12.getNumParameters())\r\n            return this.p_12.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_12.getNumParameters())\r\n            return this.p_12.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_12.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_12.getNumParameters())\r\n            return this.p_12.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_12": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_09.getNumParameters())\r\n            return this.p_09.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_09.getNumParameters();\r\n\r\n        if (index < this.p_10.getNumParameters())\r\n            return this.p_10.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_10.getNumParameters();\r\n\r\n        if (index < this.p_11.getNumParameters())\r\n            return this.p_11.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_09.getNumParameters())\r\n            return this.p_09.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_09.getNumParameters();\r\n\r\n        if (index < this.p_10.getNumParameters())\r\n            return this.p_10.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_10.getNumParameters();\r\n\r\n        if (index < this.p_11.getNumParameters())\r\n            return this.p_11.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_09.getNumParameters() + this.p_10.getNumParameters() + this.p_11.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_09.getNumParameters())\r\n            return this.p_09.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_09.getNumParameters();\r\n\r\n        if (index < this.p_10.getNumParameters())\r\n            return this.p_10.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_10.getNumParameters();\r\n\r\n        if (index < this.p_11.getNumParameters())\r\n            return this.p_11.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_09": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_10": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_11": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_24": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_16.getNumParameters())\r\n            return this.p_16.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_16.getNumParameters())\r\n            return this.p_16.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_16.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_16.getNumParameters())\r\n            return this.p_16.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_16": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_13.getNumParameters())\r\n            return this.p_13.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_13.getNumParameters();\r\n\r\n        if (index < this.p_14.getNumParameters())\r\n            return this.p_14.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_14.getNumParameters();\r\n\r\n        if (index < this.p_15.getNumParameters())\r\n            return this.p_15.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_13.getNumParameters())\r\n            return this.p_13.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_13.getNumParameters();\r\n\r\n        if (index < this.p_14.getNumParameters())\r\n            return this.p_14.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_14.getNumParameters();\r\n\r\n        if (index < this.p_15.getNumParameters())\r\n            return this.p_15.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_13.getNumParameters() + this.p_14.getNumParameters() + this.p_15.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_13.getNumParameters())\r\n            return this.p_13.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_13.getNumParameters();\r\n\r\n        if (index < this.p_14.getNumParameters())\r\n            return this.p_14.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_14.getNumParameters();\r\n\r\n        if (index < this.p_15.getNumParameters())\r\n            return this.p_15.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_13": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_14": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_15": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_25": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_26": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_17.getNumParameters())\r\n            return this.p_17.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_17.getNumParameters();\r\n\r\n        if (index < this.p_18.getNumParameters())\r\n            return this.p_18.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_17.getNumParameters())\r\n            return this.p_17.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_17.getNumParameters();\r\n\r\n        if (index < this.p_18.getNumParameters())\r\n            return this.p_18.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_17.getNumParameters() + this.p_18.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_17.getNumParameters())\r\n            return this.p_17.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_17.getNumParameters();\r\n\r\n        if (index < this.p_18.getNumParameters())\r\n            return this.p_18.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_17": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_18": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_27": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_230": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 5 ? 5 : value));\r\n            let normalizedValue = (value - 0) / (5 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 6);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 6:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 90 ? 90 : value));\r\n            let normalizedValue = (value - 0) / (90 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 5:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 180 ? 180 : value));\r\n            let normalizedValue = (value - 0) / (180 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 7:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 360 ? 360 : value));\r\n            let normalizedValue = (value - 0) / (360 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 4:\r\n        {\r\n            value = (value < 100 ? 100 : (value > 1000 ? 1000 : value));\r\n            let normalizedValue = (value - 100) / (1000 - 100);\r\n            return normalizedValue;\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < 100 ? 100 : (value > 2000 ? 2000 : value));\r\n            let normalizedValue = (value - 100) / (2000 - 100);\r\n            return normalizedValue;\r\n        }\r\n    case 3:\r\n        {\r\n            value = (value < -2.94 ? -2.94 : (value > 1.86 ? 1.86 : value));\r\n            let normalizedValue = (value - -2.94) / (1.86 - -2.94);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 8;\r\n\r\n        if (index < this.p_48.getNumParameters())\r\n            return this.p_48.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_48.getNumParameters();\r\n\r\n        if (index < this.p_49.getNumParameters())\r\n            return this.p_49.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_49.getNumParameters();\r\n\r\n        if (index < this.p_50.getNumParameters())\r\n            return this.p_50.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_50.getNumParameters();\r\n\r\n        if (index < this.p_51.getNumParameters())\r\n            return this.p_51.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_51.getNumParameters();\r\n\r\n        if (index < this.p_52.getNumParameters())\r\n            return this.p_52.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_52.getNumParameters();\r\n\r\n        if (index < this.p_53.getNumParameters())\r\n            return this.p_53.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_53.getNumParameters();\r\n\r\n        if (index < this.p_54.getNumParameters())\r\n            return this.p_54.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_54.getNumParameters();\r\n\r\n        if (index < this.p_55.getNumParameters())\r\n            return this.p_55.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_55.getNumParameters();\r\n\r\n        if (index < this.p_56.getNumParameters())\r\n            return this.p_56.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_56.getNumParameters();\r\n\r\n        if (index < this.p_57.getNumParameters())\r\n            return this.p_57.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_57.getNumParameters();\r\n\r\n        if (index < this.p_58.getNumParameters())\r\n            return this.p_58.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_58.getNumParameters();\r\n\r\n        if (index < this.p_59.getNumParameters())\r\n            return this.p_59.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 6);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (5 - 0);\r\n            }\r\n        }\r\n    case 6:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (90 - 0);\r\n            }\r\n        }\r\n    case 5:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (180 - 0);\r\n            }\r\n        }\r\n    case 7:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (360 - 0);\r\n            }\r\n        }\r\n    case 4:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 100 + value * (1000 - 100);\r\n            }\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 100 + value * (2000 - 100);\r\n            }\r\n        }\r\n    case 3:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return -2.94 + value * (1.86 - -2.94);\r\n            }\r\n        }\r\n    default:\r\n        index -= 8;\r\n\r\n        if (index < this.p_48.getNumParameters())\r\n            return this.p_48.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_48.getNumParameters();\r\n\r\n        if (index < this.p_49.getNumParameters())\r\n            return this.p_49.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_49.getNumParameters();\r\n\r\n        if (index < this.p_50.getNumParameters())\r\n            return this.p_50.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_50.getNumParameters();\r\n\r\n        if (index < this.p_51.getNumParameters())\r\n            return this.p_51.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_51.getNumParameters();\r\n\r\n        if (index < this.p_52.getNumParameters())\r\n            return this.p_52.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_52.getNumParameters();\r\n\r\n        if (index < this.p_53.getNumParameters())\r\n            return this.p_53.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_53.getNumParameters();\r\n\r\n        if (index < this.p_54.getNumParameters())\r\n            return this.p_54.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_54.getNumParameters();\r\n\r\n        if (index < this.p_55.getNumParameters())\r\n            return this.p_55.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_55.getNumParameters();\r\n\r\n        if (index < this.p_56.getNumParameters())\r\n            return this.p_56.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_56.getNumParameters();\r\n\r\n        if (index < this.p_57.getNumParameters())\r\n            return this.p_57.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_57.getNumParameters();\r\n\r\n        if (index < this.p_58.getNumParameters())\r\n            return this.p_58.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_58.getNumParameters();\r\n\r\n        if (index < this.p_59.getNumParameters())\r\n            return this.p_59.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "getNumParameters": "function getNumParameters() {\r\n    return 8 + this.p_48.getNumParameters() + this.p_49.getNumParameters() + this.p_50.getNumParameters() + this.p_51.getNumParameters() + this.p_52.getNumParameters() + this.p_53.getNumParameters() + this.p_54.getNumParameters() + this.p_55.getNumParameters() + this.p_56.getNumParameters() + this.p_57.getNumParameters() + this.p_58.getNumParameters() + this.p_59.getNumParameters();\r\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 2000 ? 2000 : (v < 100 ? 100 : v));\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 5 ? 5 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 5 / 5;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 3:\r\n        {\r\n            v = (v > 1.86 ? 1.86 : (v < -2.94 ? -2.94 : v));\r\n            return v;\r\n        }\r\n    case 4:\r\n        {\r\n            v = (v > 1000 ? 1000 : (v < 100 ? 100 : v));\r\n            return v;\r\n        }\r\n    case 5:\r\n        {\r\n            v = (v > 180 ? 180 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 6:\r\n        {\r\n            v = (v > 90 ? 90 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 7:\r\n        {\r\n            v = (v > 360 ? 360 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 8;\r\n\r\n        if (index < this.p_48.getNumParameters())\r\n            return this.p_48.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_48.getNumParameters();\r\n\r\n        if (index < this.p_49.getNumParameters())\r\n            return this.p_49.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_49.getNumParameters();\r\n\r\n        if (index < this.p_50.getNumParameters())\r\n            return this.p_50.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_50.getNumParameters();\r\n\r\n        if (index < this.p_51.getNumParameters())\r\n            return this.p_51.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_51.getNumParameters();\r\n\r\n        if (index < this.p_52.getNumParameters())\r\n            return this.p_52.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_52.getNumParameters();\r\n\r\n        if (index < this.p_53.getNumParameters())\r\n            return this.p_53.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_53.getNumParameters();\r\n\r\n        if (index < this.p_54.getNumParameters())\r\n            return this.p_54.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_54.getNumParameters();\r\n\r\n        if (index < this.p_55.getNumParameters())\r\n            return this.p_55.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_55.getNumParameters();\r\n\r\n        if (index < this.p_56.getNumParameters())\r\n            return this.p_56.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_56.getNumParameters();\r\n\r\n        if (index < this.p_57.getNumParameters())\r\n            return this.p_57.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_57.getNumParameters();\r\n\r\n        if (index < this.p_58.getNumParameters())\r\n            return this.p_58.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_58.getNumParameters();\r\n\r\n        if (index < this.p_59.getNumParameters())\r\n            return this.p_59.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "subpatches": {
            "p_48": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_28.getNumParameters())\r\n            return this.p_28.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_28.getNumParameters();\r\n\r\n        if (index < this.p_29.getNumParameters())\r\n            return this.p_29.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_29.getNumParameters();\r\n\r\n        if (index < this.p_30.getNumParameters())\r\n            return this.p_30.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_28.getNumParameters())\r\n            return this.p_28.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_28.getNumParameters();\r\n\r\n        if (index < this.p_29.getNumParameters())\r\n            return this.p_29.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_29.getNumParameters();\r\n\r\n        if (index < this.p_30.getNumParameters())\r\n            return this.p_30.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_28.getNumParameters() + this.p_29.getNumParameters() + this.p_30.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_28.getNumParameters())\r\n            return this.p_28.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_28.getNumParameters();\r\n\r\n        if (index < this.p_29.getNumParameters())\r\n            return this.p_29.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_29.getNumParameters();\r\n\r\n        if (index < this.p_30.getNumParameters())\r\n            return this.p_30.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_28": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_29": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_30": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_49": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_50": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_31.getNumParameters())\r\n            return this.p_31.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_31.getNumParameters())\r\n            return this.p_31.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_31.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_31.getNumParameters())\r\n            return this.p_31.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_31": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_51": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_32.getNumParameters())\r\n            return this.p_32.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_32.getNumParameters();\r\n\r\n        if (index < this.p_33.getNumParameters())\r\n            return this.p_33.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_32.getNumParameters())\r\n            return this.p_32.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_32.getNumParameters();\r\n\r\n        if (index < this.p_33.getNumParameters())\r\n            return this.p_33.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_32.getNumParameters() + this.p_33.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_32.getNumParameters())\r\n            return this.p_32.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_32.getNumParameters();\r\n\r\n        if (index < this.p_33.getNumParameters())\r\n            return this.p_33.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_32": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_33": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_52": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_34.getNumParameters())\r\n            return this.p_34.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_34.getNumParameters())\r\n            return this.p_34.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_34.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_34.getNumParameters())\r\n            return this.p_34.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_34": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_53": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_35.getNumParameters())\r\n            return this.p_35.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_35.getNumParameters())\r\n            return this.p_35.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_35.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_35.getNumParameters())\r\n            return this.p_35.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_35": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_54": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_36.getNumParameters())\r\n            return this.p_36.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_36.getNumParameters())\r\n            return this.p_36.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_36.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_36.getNumParameters())\r\n            return this.p_36.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_36": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_55": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_37.getNumParameters())\r\n            return this.p_37.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_37.getNumParameters();\r\n\r\n        if (index < this.p_38.getNumParameters())\r\n            return this.p_38.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_37.getNumParameters())\r\n            return this.p_37.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_37.getNumParameters();\r\n\r\n        if (index < this.p_38.getNumParameters())\r\n            return this.p_38.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_37.getNumParameters() + this.p_38.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_37.getNumParameters())\r\n            return this.p_37.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_37.getNumParameters();\r\n\r\n        if (index < this.p_38.getNumParameters())\r\n            return this.p_38.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_37": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_38": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_56": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_39.getNumParameters())\r\n            return this.p_39.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_39.getNumParameters();\r\n\r\n        if (index < this.p_40.getNumParameters())\r\n            return this.p_40.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_39.getNumParameters())\r\n            return this.p_39.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_39.getNumParameters();\r\n\r\n        if (index < this.p_40.getNumParameters())\r\n            return this.p_40.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_39.getNumParameters() + this.p_40.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_39.getNumParameters())\r\n            return this.p_39.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_39.getNumParameters();\r\n\r\n        if (index < this.p_40.getNumParameters())\r\n            return this.p_40.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_39": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_40": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_57": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_58": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_41.getNumParameters())\r\n            return this.p_41.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_41.getNumParameters();\r\n\r\n        if (index < this.p_42.getNumParameters())\r\n            return this.p_42.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_42.getNumParameters();\r\n\r\n        if (index < this.p_43.getNumParameters())\r\n            return this.p_43.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_43.getNumParameters();\r\n\r\n        if (index < this.p_44.getNumParameters())\r\n            return this.p_44.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_44.getNumParameters();\r\n\r\n        if (index < this.p_45.getNumParameters())\r\n            return this.p_45.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_45.getNumParameters();\r\n\r\n        if (index < this.p_46.getNumParameters())\r\n            return this.p_46.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_46.getNumParameters();\r\n\r\n        if (index < this.p_47.getNumParameters())\r\n            return this.p_47.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_41.getNumParameters())\r\n            return this.p_41.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_41.getNumParameters();\r\n\r\n        if (index < this.p_42.getNumParameters())\r\n            return this.p_42.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_42.getNumParameters();\r\n\r\n        if (index < this.p_43.getNumParameters())\r\n            return this.p_43.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_43.getNumParameters();\r\n\r\n        if (index < this.p_44.getNumParameters())\r\n            return this.p_44.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_44.getNumParameters();\r\n\r\n        if (index < this.p_45.getNumParameters())\r\n            return this.p_45.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_45.getNumParameters();\r\n\r\n        if (index < this.p_46.getNumParameters())\r\n            return this.p_46.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_46.getNumParameters();\r\n\r\n        if (index < this.p_47.getNumParameters())\r\n            return this.p_47.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_41.getNumParameters() + this.p_42.getNumParameters() + this.p_43.getNumParameters() + this.p_44.getNumParameters() + this.p_45.getNumParameters() + this.p_46.getNumParameters() + this.p_47.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_41.getNumParameters())\r\n            return this.p_41.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_41.getNumParameters();\r\n\r\n        if (index < this.p_42.getNumParameters())\r\n            return this.p_42.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_42.getNumParameters();\r\n\r\n        if (index < this.p_43.getNumParameters())\r\n            return this.p_43.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_43.getNumParameters();\r\n\r\n        if (index < this.p_44.getNumParameters())\r\n            return this.p_44.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_44.getNumParameters();\r\n\r\n        if (index < this.p_45.getNumParameters())\r\n            return this.p_45.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_45.getNumParameters();\r\n\r\n        if (index < this.p_46.getNumParameters())\r\n            return this.p_46.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_46.getNumParameters();\r\n\r\n        if (index < this.p_47.getNumParameters())\r\n            return this.p_47.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_41": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_42": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_43": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_44": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_45": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_46": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_47": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_59": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_231": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 4:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 2 ? 2 : value));\r\n            let normalizedValue = (value - 0) / (2 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 3);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 90 ? 90 : value));\r\n            let normalizedValue = (value - 0) / (90 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 8:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\r\n            let normalizedValue = (value - 0) / (100 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 9:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 180 ? 180 : value));\r\n            let normalizedValue = (value - 0) / (180 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 5:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 360 ? 360 : value));\r\n            let normalizedValue = (value - 0) / (360 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 3:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 22000 ? 22000 : value));\r\n            let normalizedValue = (value - 0) / (22000 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 6:\r\n        {\r\n            value = (value < 100 ? 100 : (value > 2000 ? 2000 : value));\r\n            let normalizedValue = (value - 100) / (2000 - 100);\r\n            return normalizedValue;\r\n        }\r\n    case 7:\r\n        {\r\n            value = (value < -0.55 ? -0.55 : (value > 1.17 ? 1.17 : value));\r\n            let normalizedValue = (value - -0.55) / (1.17 - -0.55);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 10;\r\n\r\n        if (index < this.p_86.getNumParameters())\r\n            return this.p_86.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_86.getNumParameters();\r\n\r\n        if (index < this.p_87.getNumParameters())\r\n            return this.p_87.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_87.getNumParameters();\r\n\r\n        if (index < this.p_88.getNumParameters())\r\n            return this.p_88.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_88.getNumParameters();\r\n\r\n        if (index < this.p_89.getNumParameters())\r\n            return this.p_89.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_89.getNumParameters();\r\n\r\n        if (index < this.p_90.getNumParameters())\r\n            return this.p_90.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_90.getNumParameters();\r\n\r\n        if (index < this.p_91.getNumParameters())\r\n            return this.p_91.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_91.getNumParameters();\r\n\r\n        if (index < this.p_92.getNumParameters())\r\n            return this.p_92.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_92.getNumParameters();\r\n\r\n        if (index < this.p_93.getNumParameters())\r\n            return this.p_93.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_93.getNumParameters();\r\n\r\n        if (index < this.p_94.getNumParameters())\r\n            return this.p_94.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_94.getNumParameters();\r\n\r\n        if (index < this.p_95.getNumParameters())\r\n            return this.p_95.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_95.getNumParameters();\r\n\r\n        if (index < this.p_96.getNumParameters())\r\n            return this.p_96.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_96.getNumParameters();\r\n\r\n        if (index < this.p_97.getNumParameters())\r\n            return this.p_97.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    case 4:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 3);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (2 - 0);\r\n            }\r\n        }\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (90 - 0);\r\n            }\r\n        }\r\n    case 8:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (100 - 0);\r\n            }\r\n        }\r\n    case 9:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (180 - 0);\r\n            }\r\n        }\r\n    case 5:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (360 - 0);\r\n            }\r\n        }\r\n    case 3:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (22000 - 0);\r\n            }\r\n        }\r\n    case 6:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 100 + value * (2000 - 100);\r\n            }\r\n        }\r\n    case 7:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return -0.55 + value * (1.17 - -0.55);\r\n            }\r\n        }\r\n    default:\r\n        index -= 10;\r\n\r\n        if (index < this.p_86.getNumParameters())\r\n            return this.p_86.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_86.getNumParameters();\r\n\r\n        if (index < this.p_87.getNumParameters())\r\n            return this.p_87.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_87.getNumParameters();\r\n\r\n        if (index < this.p_88.getNumParameters())\r\n            return this.p_88.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_88.getNumParameters();\r\n\r\n        if (index < this.p_89.getNumParameters())\r\n            return this.p_89.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_89.getNumParameters();\r\n\r\n        if (index < this.p_90.getNumParameters())\r\n            return this.p_90.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_90.getNumParameters();\r\n\r\n        if (index < this.p_91.getNumParameters())\r\n            return this.p_91.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_91.getNumParameters();\r\n\r\n        if (index < this.p_92.getNumParameters())\r\n            return this.p_92.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_92.getNumParameters();\r\n\r\n        if (index < this.p_93.getNumParameters())\r\n            return this.p_93.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_93.getNumParameters();\r\n\r\n        if (index < this.p_94.getNumParameters())\r\n            return this.p_94.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_94.getNumParameters();\r\n\r\n        if (index < this.p_95.getNumParameters())\r\n            return this.p_95.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_95.getNumParameters();\r\n\r\n        if (index < this.p_96.getNumParameters())\r\n            return this.p_96.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_96.getNumParameters();\r\n\r\n        if (index < this.p_97.getNumParameters())\r\n            return this.p_97.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "getNumParameters": "function getNumParameters() {\r\n    return 10 + this.p_86.getNumParameters() + this.p_87.getNumParameters() + this.p_88.getNumParameters() + this.p_89.getNumParameters() + this.p_90.getNumParameters() + this.p_91.getNumParameters() + this.p_92.getNumParameters() + this.p_93.getNumParameters() + this.p_94.getNumParameters() + this.p_95.getNumParameters() + this.p_96.getNumParameters() + this.p_97.getNumParameters();\r\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 90 ? 90 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 2 ? 2 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 2 / 2;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 3:\r\n        {\r\n            v = (v > 22000 ? 22000 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 4:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 5:\r\n        {\r\n            v = (v > 360 ? 360 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 6:\r\n        {\r\n            v = (v > 2000 ? 2000 : (v < 100 ? 100 : v));\r\n            return v;\r\n        }\r\n    case 7:\r\n        {\r\n            v = (v > 1.17 ? 1.17 : (v < -0.55 ? -0.55 : v));\r\n            return v;\r\n        }\r\n    case 8:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 9:\r\n        {\r\n            v = (v > 180 ? 180 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 10;\r\n\r\n        if (index < this.p_86.getNumParameters())\r\n            return this.p_86.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_86.getNumParameters();\r\n\r\n        if (index < this.p_87.getNumParameters())\r\n            return this.p_87.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_87.getNumParameters();\r\n\r\n        if (index < this.p_88.getNumParameters())\r\n            return this.p_88.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_88.getNumParameters();\r\n\r\n        if (index < this.p_89.getNumParameters())\r\n            return this.p_89.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_89.getNumParameters();\r\n\r\n        if (index < this.p_90.getNumParameters())\r\n            return this.p_90.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_90.getNumParameters();\r\n\r\n        if (index < this.p_91.getNumParameters())\r\n            return this.p_91.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_91.getNumParameters();\r\n\r\n        if (index < this.p_92.getNumParameters())\r\n            return this.p_92.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_92.getNumParameters();\r\n\r\n        if (index < this.p_93.getNumParameters())\r\n            return this.p_93.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_93.getNumParameters();\r\n\r\n        if (index < this.p_94.getNumParameters())\r\n            return this.p_94.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_94.getNumParameters();\r\n\r\n        if (index < this.p_95.getNumParameters())\r\n            return this.p_95.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_95.getNumParameters();\r\n\r\n        if (index < this.p_96.getNumParameters())\r\n            return this.p_96.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_96.getNumParameters();\r\n\r\n        if (index < this.p_97.getNumParameters())\r\n            return this.p_97.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "subpatches": {
            "p_86": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_87": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_88": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_62.getNumParameters())\r\n            return this.p_62.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_62.getNumParameters();\r\n\r\n        if (index < this.p_63.getNumParameters())\r\n            return this.p_63.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_62.getNumParameters())\r\n            return this.p_62.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_62.getNumParameters();\r\n\r\n        if (index < this.p_63.getNumParameters())\r\n            return this.p_63.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_62.getNumParameters() + this.p_63.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_62.getNumParameters())\r\n            return this.p_62.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_62.getNumParameters();\r\n\r\n        if (index < this.p_63.getNumParameters())\r\n            return this.p_63.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_62": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_63": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_60.getNumParameters())\r\n            return this.p_60.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_60.getNumParameters();\r\n\r\n        if (index < this.p_61.getNumParameters())\r\n            return this.p_61.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_60.getNumParameters())\r\n            return this.p_60.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_60.getNumParameters();\r\n\r\n        if (index < this.p_61.getNumParameters())\r\n            return this.p_61.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_60.getNumParameters() + this.p_61.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_60.getNumParameters())\r\n            return this.p_60.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_60.getNumParameters();\r\n\r\n        if (index < this.p_61.getNumParameters())\r\n            return this.p_61.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_60": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_61": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_89": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_66.getNumParameters())\r\n            return this.p_66.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_66.getNumParameters();\r\n\r\n        if (index < this.p_67.getNumParameters())\r\n            return this.p_67.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_66.getNumParameters())\r\n            return this.p_66.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_66.getNumParameters();\r\n\r\n        if (index < this.p_67.getNumParameters())\r\n            return this.p_67.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_66.getNumParameters() + this.p_67.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_66.getNumParameters())\r\n            return this.p_66.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_66.getNumParameters();\r\n\r\n        if (index < this.p_67.getNumParameters())\r\n            return this.p_67.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_66": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_67": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_64.getNumParameters())\r\n            return this.p_64.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_64.getNumParameters();\r\n\r\n        if (index < this.p_65.getNumParameters())\r\n            return this.p_65.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_64.getNumParameters())\r\n            return this.p_64.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_64.getNumParameters();\r\n\r\n        if (index < this.p_65.getNumParameters())\r\n            return this.p_65.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_64.getNumParameters() + this.p_65.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_64.getNumParameters())\r\n            return this.p_64.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_64.getNumParameters();\r\n\r\n        if (index < this.p_65.getNumParameters())\r\n            return this.p_65.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_64": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_65": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_90": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_70.getNumParameters())\r\n            return this.p_70.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_70.getNumParameters();\r\n\r\n        if (index < this.p_71.getNumParameters())\r\n            return this.p_71.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_70.getNumParameters())\r\n            return this.p_70.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_70.getNumParameters();\r\n\r\n        if (index < this.p_71.getNumParameters())\r\n            return this.p_71.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_70.getNumParameters() + this.p_71.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_70.getNumParameters())\r\n            return this.p_70.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_70.getNumParameters();\r\n\r\n        if (index < this.p_71.getNumParameters())\r\n            return this.p_71.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_70": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_71": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_68.getNumParameters())\r\n            return this.p_68.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_68.getNumParameters();\r\n\r\n        if (index < this.p_69.getNumParameters())\r\n            return this.p_69.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_68.getNumParameters())\r\n            return this.p_68.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_68.getNumParameters();\r\n\r\n        if (index < this.p_69.getNumParameters())\r\n            return this.p_69.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_68.getNumParameters() + this.p_69.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_68.getNumParameters())\r\n            return this.p_68.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_68.getNumParameters();\r\n\r\n        if (index < this.p_69.getNumParameters())\r\n            return this.p_69.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_68": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_69": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_91": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_74.getNumParameters())\r\n            return this.p_74.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_74.getNumParameters();\r\n\r\n        if (index < this.p_75.getNumParameters())\r\n            return this.p_75.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_74.getNumParameters())\r\n            return this.p_74.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_74.getNumParameters();\r\n\r\n        if (index < this.p_75.getNumParameters())\r\n            return this.p_75.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_74.getNumParameters() + this.p_75.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_74.getNumParameters())\r\n            return this.p_74.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_74.getNumParameters();\r\n\r\n        if (index < this.p_75.getNumParameters())\r\n            return this.p_75.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_74": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_75": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_72.getNumParameters())\r\n            return this.p_72.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_72.getNumParameters();\r\n\r\n        if (index < this.p_73.getNumParameters())\r\n            return this.p_73.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_72.getNumParameters())\r\n            return this.p_72.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_72.getNumParameters();\r\n\r\n        if (index < this.p_73.getNumParameters())\r\n            return this.p_73.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_72.getNumParameters() + this.p_73.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_72.getNumParameters())\r\n            return this.p_72.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_72.getNumParameters();\r\n\r\n        if (index < this.p_73.getNumParameters())\r\n            return this.p_73.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_72": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_73": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_92": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_78.getNumParameters())\r\n            return this.p_78.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_78.getNumParameters();\r\n\r\n        if (index < this.p_79.getNumParameters())\r\n            return this.p_79.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_78.getNumParameters())\r\n            return this.p_78.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_78.getNumParameters();\r\n\r\n        if (index < this.p_79.getNumParameters())\r\n            return this.p_79.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_78.getNumParameters() + this.p_79.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_78.getNumParameters())\r\n            return this.p_78.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_78.getNumParameters();\r\n\r\n        if (index < this.p_79.getNumParameters())\r\n            return this.p_79.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_78": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_79": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_76.getNumParameters())\r\n            return this.p_76.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_76.getNumParameters();\r\n\r\n        if (index < this.p_77.getNumParameters())\r\n            return this.p_77.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_76.getNumParameters())\r\n            return this.p_76.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_76.getNumParameters();\r\n\r\n        if (index < this.p_77.getNumParameters())\r\n            return this.p_77.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_76.getNumParameters() + this.p_77.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_76.getNumParameters())\r\n            return this.p_76.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_76.getNumParameters();\r\n\r\n        if (index < this.p_77.getNumParameters())\r\n            return this.p_77.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_76": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_77": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_93": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_82.getNumParameters())\r\n            return this.p_82.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_82.getNumParameters();\r\n\r\n        if (index < this.p_83.getNumParameters())\r\n            return this.p_83.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_82.getNumParameters())\r\n            return this.p_82.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_82.getNumParameters();\r\n\r\n        if (index < this.p_83.getNumParameters())\r\n            return this.p_83.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_82.getNumParameters() + this.p_83.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_82.getNumParameters())\r\n            return this.p_82.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_82.getNumParameters();\r\n\r\n        if (index < this.p_83.getNumParameters())\r\n            return this.p_83.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_82": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_83": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_80.getNumParameters())\r\n            return this.p_80.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_80.getNumParameters();\r\n\r\n        if (index < this.p_81.getNumParameters())\r\n            return this.p_81.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_80.getNumParameters())\r\n            return this.p_80.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_80.getNumParameters();\r\n\r\n        if (index < this.p_81.getNumParameters())\r\n            return this.p_81.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_80.getNumParameters() + this.p_81.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_80.getNumParameters())\r\n            return this.p_80.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_80.getNumParameters();\r\n\r\n        if (index < this.p_81.getNumParameters())\r\n            return this.p_81.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_80": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_81": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_94": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_95": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_84.getNumParameters())\r\n            return this.p_84.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_84.getNumParameters();\r\n\r\n        if (index < this.p_85.getNumParameters())\r\n            return this.p_85.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_84.getNumParameters())\r\n            return this.p_84.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_84.getNumParameters();\r\n\r\n        if (index < this.p_85.getNumParameters())\r\n            return this.p_85.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_84.getNumParameters() + this.p_85.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_84.getNumParameters())\r\n            return this.p_84.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_84.getNumParameters();\r\n\r\n        if (index < this.p_85.getNumParameters())\r\n            return this.p_85.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_84": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_85": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_96": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_97": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_232": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 6:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 3:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 90 ? 90 : value));\r\n            let normalizedValue = (value - 0) / (90 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 180 ? 180 : value));\r\n            let normalizedValue = (value - 0) / (180 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 4:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 360 ? 360 : value));\r\n            let normalizedValue = (value - 0) / (360 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 5:\r\n        {\r\n            value = (value < 100 ? 100 : (value > 2000 ? 2000 : value));\r\n            let normalizedValue = (value - 100) / (2000 - 100);\r\n            return normalizedValue;\r\n        }\r\n    case 0:\r\n        {\r\n            value = (value < 7.67 ? 7.67 : (value > 8 ? 8 : value));\r\n            let normalizedValue = (value - 7.67) / (8 - 7.67);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 7;\r\n\r\n        if (index < this.p_110.getNumParameters())\r\n            return this.p_110.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_110.getNumParameters();\r\n\r\n        if (index < this.p_111.getNumParameters())\r\n            return this.p_111.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_111.getNumParameters();\r\n\r\n        if (index < this.p_112.getNumParameters())\r\n            return this.p_112.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_112.getNumParameters();\r\n\r\n        if (index < this.p_113.getNumParameters())\r\n            return this.p_113.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_113.getNumParameters();\r\n\r\n        if (index < this.p_114.getNumParameters())\r\n            return this.p_114.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_114.getNumParameters();\r\n\r\n        if (index < this.p_115.getNumParameters())\r\n            return this.p_115.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_115.getNumParameters();\r\n\r\n        if (index < this.p_116.getNumParameters())\r\n            return this.p_116.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_116.getNumParameters();\r\n\r\n        if (index < this.p_117.getNumParameters())\r\n            return this.p_117.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_117.getNumParameters();\r\n\r\n        if (index < this.p_118.getNumParameters())\r\n            return this.p_118.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_118.getNumParameters();\r\n\r\n        if (index < this.p_119.getNumParameters())\r\n            return this.p_119.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_119.getNumParameters();\r\n\r\n        if (index < this.p_120.getNumParameters())\r\n            return this.p_120.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_120.getNumParameters();\r\n\r\n        if (index < this.p_121.getNumParameters())\r\n            return this.p_121.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_121.getNumParameters();\r\n\r\n        if (index < this.p_122.getNumParameters())\r\n            return this.p_122.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_122.getNumParameters();\r\n\r\n        if (index < this.p_123.getNumParameters())\r\n            return this.p_123.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_123.getNumParameters();\r\n\r\n        if (index < this.p_124.getNumParameters())\r\n            return this.p_124.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_124.getNumParameters();\r\n\r\n        if (index < this.p_125.getNumParameters())\r\n            return this.p_125.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_125.getNumParameters();\r\n\r\n        if (index < this.p_126.getNumParameters())\r\n            return this.p_126.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_126.getNumParameters();\r\n\r\n        if (index < this.p_127.getNumParameters())\r\n            return this.p_127.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_127.getNumParameters();\r\n\r\n        if (index < this.p_128.getNumParameters())\r\n            return this.p_128.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_128.getNumParameters();\r\n\r\n        if (index < this.p_129.getNumParameters())\r\n            return this.p_129.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_129.getNumParameters();\r\n\r\n        if (index < this.p_130.getNumParameters())\r\n            return this.p_130.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_130.getNumParameters();\r\n\r\n        if (index < this.p_131.getNumParameters())\r\n            return this.p_131.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_131.getNumParameters();\r\n\r\n        if (index < this.p_132.getNumParameters())\r\n            return this.p_132.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_132.getNumParameters();\r\n\r\n        if (index < this.p_133.getNumParameters())\r\n            return this.p_133.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_133.getNumParameters();\r\n\r\n        if (index < this.p_134.getNumParameters())\r\n            return this.p_134.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_134.getNumParameters();\r\n\r\n        if (index < this.p_135.getNumParameters())\r\n            return this.p_135.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_135.getNumParameters();\r\n\r\n        if (index < this.p_136.getNumParameters())\r\n            return this.p_136.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_136.getNumParameters();\r\n\r\n        if (index < this.p_137.getNumParameters())\r\n            return this.p_137.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_137.getNumParameters();\r\n\r\n        if (index < this.p_138.getNumParameters())\r\n            return this.p_138.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_138.getNumParameters();\r\n\r\n        if (index < this.p_139.getNumParameters())\r\n            return this.p_139.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_139.getNumParameters();\r\n\r\n        if (index < this.p_140.getNumParameters())\r\n            return this.p_140.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_140.getNumParameters();\r\n\r\n        if (index < this.p_141.getNumParameters())\r\n            return this.p_141.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_141.getNumParameters();\r\n\r\n        if (index < this.p_142.getNumParameters())\r\n            return this.p_142.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_142.getNumParameters();\r\n\r\n        if (index < this.p_143.getNumParameters())\r\n            return this.p_143.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_143.getNumParameters();\r\n\r\n        if (index < this.p_144.getNumParameters())\r\n            return this.p_144.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_144.getNumParameters();\r\n\r\n        if (index < this.p_145.getNumParameters())\r\n            return this.p_145.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_145.getNumParameters();\r\n\r\n        if (index < this.p_146.getNumParameters())\r\n            return this.p_146.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_146.getNumParameters();\r\n\r\n        if (index < this.p_147.getNumParameters())\r\n            return this.p_147.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    case 6:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    case 3:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (90 - 0);\r\n            }\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (180 - 0);\r\n            }\r\n        }\r\n    case 4:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (360 - 0);\r\n            }\r\n        }\r\n    case 5:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 100 + value * (2000 - 100);\r\n            }\r\n        }\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 7.67 + value * (8 - 7.67);\r\n            }\r\n        }\r\n    default:\r\n        index -= 7;\r\n\r\n        if (index < this.p_110.getNumParameters())\r\n            return this.p_110.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_110.getNumParameters();\r\n\r\n        if (index < this.p_111.getNumParameters())\r\n            return this.p_111.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_111.getNumParameters();\r\n\r\n        if (index < this.p_112.getNumParameters())\r\n            return this.p_112.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_112.getNumParameters();\r\n\r\n        if (index < this.p_113.getNumParameters())\r\n            return this.p_113.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_113.getNumParameters();\r\n\r\n        if (index < this.p_114.getNumParameters())\r\n            return this.p_114.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_114.getNumParameters();\r\n\r\n        if (index < this.p_115.getNumParameters())\r\n            return this.p_115.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_115.getNumParameters();\r\n\r\n        if (index < this.p_116.getNumParameters())\r\n            return this.p_116.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_116.getNumParameters();\r\n\r\n        if (index < this.p_117.getNumParameters())\r\n            return this.p_117.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_117.getNumParameters();\r\n\r\n        if (index < this.p_118.getNumParameters())\r\n            return this.p_118.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_118.getNumParameters();\r\n\r\n        if (index < this.p_119.getNumParameters())\r\n            return this.p_119.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_119.getNumParameters();\r\n\r\n        if (index < this.p_120.getNumParameters())\r\n            return this.p_120.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_120.getNumParameters();\r\n\r\n        if (index < this.p_121.getNumParameters())\r\n            return this.p_121.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_121.getNumParameters();\r\n\r\n        if (index < this.p_122.getNumParameters())\r\n            return this.p_122.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_122.getNumParameters();\r\n\r\n        if (index < this.p_123.getNumParameters())\r\n            return this.p_123.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_123.getNumParameters();\r\n\r\n        if (index < this.p_124.getNumParameters())\r\n            return this.p_124.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_124.getNumParameters();\r\n\r\n        if (index < this.p_125.getNumParameters())\r\n            return this.p_125.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_125.getNumParameters();\r\n\r\n        if (index < this.p_126.getNumParameters())\r\n            return this.p_126.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_126.getNumParameters();\r\n\r\n        if (index < this.p_127.getNumParameters())\r\n            return this.p_127.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_127.getNumParameters();\r\n\r\n        if (index < this.p_128.getNumParameters())\r\n            return this.p_128.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_128.getNumParameters();\r\n\r\n        if (index < this.p_129.getNumParameters())\r\n            return this.p_129.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_129.getNumParameters();\r\n\r\n        if (index < this.p_130.getNumParameters())\r\n            return this.p_130.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_130.getNumParameters();\r\n\r\n        if (index < this.p_131.getNumParameters())\r\n            return this.p_131.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_131.getNumParameters();\r\n\r\n        if (index < this.p_132.getNumParameters())\r\n            return this.p_132.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_132.getNumParameters();\r\n\r\n        if (index < this.p_133.getNumParameters())\r\n            return this.p_133.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_133.getNumParameters();\r\n\r\n        if (index < this.p_134.getNumParameters())\r\n            return this.p_134.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_134.getNumParameters();\r\n\r\n        if (index < this.p_135.getNumParameters())\r\n            return this.p_135.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_135.getNumParameters();\r\n\r\n        if (index < this.p_136.getNumParameters())\r\n            return this.p_136.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_136.getNumParameters();\r\n\r\n        if (index < this.p_137.getNumParameters())\r\n            return this.p_137.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_137.getNumParameters();\r\n\r\n        if (index < this.p_138.getNumParameters())\r\n            return this.p_138.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_138.getNumParameters();\r\n\r\n        if (index < this.p_139.getNumParameters())\r\n            return this.p_139.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_139.getNumParameters();\r\n\r\n        if (index < this.p_140.getNumParameters())\r\n            return this.p_140.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_140.getNumParameters();\r\n\r\n        if (index < this.p_141.getNumParameters())\r\n            return this.p_141.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_141.getNumParameters();\r\n\r\n        if (index < this.p_142.getNumParameters())\r\n            return this.p_142.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_142.getNumParameters();\r\n\r\n        if (index < this.p_143.getNumParameters())\r\n            return this.p_143.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_143.getNumParameters();\r\n\r\n        if (index < this.p_144.getNumParameters())\r\n            return this.p_144.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_144.getNumParameters();\r\n\r\n        if (index < this.p_145.getNumParameters())\r\n            return this.p_145.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_145.getNumParameters();\r\n\r\n        if (index < this.p_146.getNumParameters())\r\n            return this.p_146.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_146.getNumParameters();\r\n\r\n        if (index < this.p_147.getNumParameters())\r\n            return this.p_147.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "getNumParameters": "function getNumParameters() {\r\n    return 7 + this.p_110.getNumParameters() + this.p_111.getNumParameters() + this.p_112.getNumParameters() + this.p_113.getNumParameters() + this.p_114.getNumParameters() + this.p_115.getNumParameters() + this.p_116.getNumParameters() + this.p_117.getNumParameters() + this.p_118.getNumParameters() + this.p_119.getNumParameters() + this.p_120.getNumParameters() + this.p_121.getNumParameters() + this.p_122.getNumParameters() + this.p_123.getNumParameters() + this.p_124.getNumParameters() + this.p_125.getNumParameters() + this.p_126.getNumParameters() + this.p_127.getNumParameters() + this.p_128.getNumParameters() + this.p_129.getNumParameters() + this.p_130.getNumParameters() + this.p_131.getNumParameters() + this.p_132.getNumParameters() + this.p_133.getNumParameters() + this.p_134.getNumParameters() + this.p_135.getNumParameters() + this.p_136.getNumParameters() + this.p_137.getNumParameters() + this.p_138.getNumParameters() + this.p_139.getNumParameters() + this.p_140.getNumParameters() + this.p_141.getNumParameters() + this.p_142.getNumParameters() + this.p_143.getNumParameters() + this.p_144.getNumParameters() + this.p_145.getNumParameters() + this.p_146.getNumParameters() + this.p_147.getNumParameters();\r\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 8 ? 8 : (v < 7.67 ? 7.67 : v));\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 180 ? 180 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 3:\r\n        {\r\n            v = (v > 90 ? 90 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 4:\r\n        {\r\n            v = (v > 360 ? 360 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 5:\r\n        {\r\n            v = (v > 2000 ? 2000 : (v < 100 ? 100 : v));\r\n            return v;\r\n        }\r\n    case 6:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 7;\r\n\r\n        if (index < this.p_110.getNumParameters())\r\n            return this.p_110.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_110.getNumParameters();\r\n\r\n        if (index < this.p_111.getNumParameters())\r\n            return this.p_111.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_111.getNumParameters();\r\n\r\n        if (index < this.p_112.getNumParameters())\r\n            return this.p_112.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_112.getNumParameters();\r\n\r\n        if (index < this.p_113.getNumParameters())\r\n            return this.p_113.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_113.getNumParameters();\r\n\r\n        if (index < this.p_114.getNumParameters())\r\n            return this.p_114.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_114.getNumParameters();\r\n\r\n        if (index < this.p_115.getNumParameters())\r\n            return this.p_115.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_115.getNumParameters();\r\n\r\n        if (index < this.p_116.getNumParameters())\r\n            return this.p_116.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_116.getNumParameters();\r\n\r\n        if (index < this.p_117.getNumParameters())\r\n            return this.p_117.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_117.getNumParameters();\r\n\r\n        if (index < this.p_118.getNumParameters())\r\n            return this.p_118.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_118.getNumParameters();\r\n\r\n        if (index < this.p_119.getNumParameters())\r\n            return this.p_119.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_119.getNumParameters();\r\n\r\n        if (index < this.p_120.getNumParameters())\r\n            return this.p_120.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_120.getNumParameters();\r\n\r\n        if (index < this.p_121.getNumParameters())\r\n            return this.p_121.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_121.getNumParameters();\r\n\r\n        if (index < this.p_122.getNumParameters())\r\n            return this.p_122.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_122.getNumParameters();\r\n\r\n        if (index < this.p_123.getNumParameters())\r\n            return this.p_123.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_123.getNumParameters();\r\n\r\n        if (index < this.p_124.getNumParameters())\r\n            return this.p_124.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_124.getNumParameters();\r\n\r\n        if (index < this.p_125.getNumParameters())\r\n            return this.p_125.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_125.getNumParameters();\r\n\r\n        if (index < this.p_126.getNumParameters())\r\n            return this.p_126.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_126.getNumParameters();\r\n\r\n        if (index < this.p_127.getNumParameters())\r\n            return this.p_127.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_127.getNumParameters();\r\n\r\n        if (index < this.p_128.getNumParameters())\r\n            return this.p_128.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_128.getNumParameters();\r\n\r\n        if (index < this.p_129.getNumParameters())\r\n            return this.p_129.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_129.getNumParameters();\r\n\r\n        if (index < this.p_130.getNumParameters())\r\n            return this.p_130.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_130.getNumParameters();\r\n\r\n        if (index < this.p_131.getNumParameters())\r\n            return this.p_131.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_131.getNumParameters();\r\n\r\n        if (index < this.p_132.getNumParameters())\r\n            return this.p_132.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_132.getNumParameters();\r\n\r\n        if (index < this.p_133.getNumParameters())\r\n            return this.p_133.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_133.getNumParameters();\r\n\r\n        if (index < this.p_134.getNumParameters())\r\n            return this.p_134.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_134.getNumParameters();\r\n\r\n        if (index < this.p_135.getNumParameters())\r\n            return this.p_135.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_135.getNumParameters();\r\n\r\n        if (index < this.p_136.getNumParameters())\r\n            return this.p_136.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_136.getNumParameters();\r\n\r\n        if (index < this.p_137.getNumParameters())\r\n            return this.p_137.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_137.getNumParameters();\r\n\r\n        if (index < this.p_138.getNumParameters())\r\n            return this.p_138.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_138.getNumParameters();\r\n\r\n        if (index < this.p_139.getNumParameters())\r\n            return this.p_139.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_139.getNumParameters();\r\n\r\n        if (index < this.p_140.getNumParameters())\r\n            return this.p_140.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_140.getNumParameters();\r\n\r\n        if (index < this.p_141.getNumParameters())\r\n            return this.p_141.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_141.getNumParameters();\r\n\r\n        if (index < this.p_142.getNumParameters())\r\n            return this.p_142.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_142.getNumParameters();\r\n\r\n        if (index < this.p_143.getNumParameters())\r\n            return this.p_143.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_143.getNumParameters();\r\n\r\n        if (index < this.p_144.getNumParameters())\r\n            return this.p_144.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_144.getNumParameters();\r\n\r\n        if (index < this.p_145.getNumParameters())\r\n            return this.p_145.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_145.getNumParameters();\r\n\r\n        if (index < this.p_146.getNumParameters())\r\n            return this.p_146.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_146.getNumParameters();\r\n\r\n        if (index < this.p_147.getNumParameters())\r\n            return this.p_147.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "subpatches": {
            "p_110": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_98.getNumParameters())\r\n            return this.p_98.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_98.getNumParameters())\r\n            return this.p_98.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_98.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_98.getNumParameters())\r\n            return this.p_98.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_98": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_111": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_112": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_99.getNumParameters())\r\n            return this.p_99.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_99.getNumParameters())\r\n            return this.p_99.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_99.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_99.getNumParameters())\r\n            return this.p_99.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_99": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_113": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_114": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_100.getNumParameters())\r\n            return this.p_100.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_100.getNumParameters())\r\n            return this.p_100.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_100.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_100.getNumParameters())\r\n            return this.p_100.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_100": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_115": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_116": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_101.getNumParameters())\r\n            return this.p_101.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_101.getNumParameters())\r\n            return this.p_101.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_101.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_101.getNumParameters())\r\n            return this.p_101.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_101": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_117": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_118": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_102.getNumParameters())\r\n            return this.p_102.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_102.getNumParameters())\r\n            return this.p_102.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_102.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_102.getNumParameters())\r\n            return this.p_102.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_102": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_119": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_120": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_121": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_103.getNumParameters())\r\n            return this.p_103.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_103.getNumParameters())\r\n            return this.p_103.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_103.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_103.getNumParameters())\r\n            return this.p_103.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_103": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_122": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_123": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_124": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_125": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_126": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_127": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_128": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_104.getNumParameters())\r\n            return this.p_104.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_104.getNumParameters())\r\n            return this.p_104.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_104.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_104.getNumParameters())\r\n            return this.p_104.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_104": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_129": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_130": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_131": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_132": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_133": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_105.getNumParameters())\r\n            return this.p_105.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_105.getNumParameters())\r\n            return this.p_105.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_105.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_105.getNumParameters())\r\n            return this.p_105.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_105": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_134": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_106.getNumParameters())\r\n            return this.p_106.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_106.getNumParameters())\r\n            return this.p_106.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_106.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_106.getNumParameters())\r\n            return this.p_106.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_106": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_135": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_136": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_137": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_138": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_139": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_107.getNumParameters())\r\n            return this.p_107.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_107.getNumParameters())\r\n            return this.p_107.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_107.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_107.getNumParameters())\r\n            return this.p_107.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_107": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_140": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_108.getNumParameters())\r\n            return this.p_108.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_108.getNumParameters())\r\n            return this.p_108.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_108.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_108.getNumParameters())\r\n            return this.p_108.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_108": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_141": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_142": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_143": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_144": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_145": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_109.getNumParameters())\r\n            return this.p_109.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_109.getNumParameters())\r\n            return this.p_109.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_109.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_109.getNumParameters())\r\n            return this.p_109.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_109": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_146": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_147": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_233": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 90 ? 90 : value));\r\n            let normalizedValue = (value - 0) / (90 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 4:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 180 ? 180 : value));\r\n            let normalizedValue = (value - 0) / (180 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 3:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 360 ? 360 : value));\r\n            let normalizedValue = (value - 0) / (360 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 2:\r\n        {\r\n            value = (value < 30 ? 30 : (value > 49 ? 49 : value));\r\n            let normalizedValue = (value - 30) / (49 - 30);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 5;\r\n\r\n        if (index < this.p_148.getNumParameters())\r\n            return this.p_148.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_148.getNumParameters();\r\n\r\n        if (index < this.p_149.getNumParameters())\r\n            return this.p_149.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_149.getNumParameters();\r\n\r\n        if (index < this.p_150.getNumParameters())\r\n            return this.p_150.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_150.getNumParameters();\r\n\r\n        if (index < this.p_151.getNumParameters())\r\n            return this.p_151.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_151.getNumParameters();\r\n\r\n        if (index < this.p_152.getNumParameters())\r\n            return this.p_152.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (90 - 0);\r\n            }\r\n        }\r\n    case 4:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (180 - 0);\r\n            }\r\n        }\r\n    case 3:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (360 - 0);\r\n            }\r\n        }\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 30 + value * (49 - 30);\r\n            }\r\n        }\r\n    default:\r\n        index -= 5;\r\n\r\n        if (index < this.p_148.getNumParameters())\r\n            return this.p_148.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_148.getNumParameters();\r\n\r\n        if (index < this.p_149.getNumParameters())\r\n            return this.p_149.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_149.getNumParameters();\r\n\r\n        if (index < this.p_150.getNumParameters())\r\n            return this.p_150.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_150.getNumParameters();\r\n\r\n        if (index < this.p_151.getNumParameters())\r\n            return this.p_151.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_151.getNumParameters();\r\n\r\n        if (index < this.p_152.getNumParameters())\r\n            return this.p_152.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "getNumParameters": "function getNumParameters() {\r\n    return 5 + this.p_148.getNumParameters() + this.p_149.getNumParameters() + this.p_150.getNumParameters() + this.p_151.getNumParameters() + this.p_152.getNumParameters();\r\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 90 ? 90 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 49 ? 49 : (v < 30 ? 30 : v));\r\n            return v;\r\n        }\r\n    case 3:\r\n        {\r\n            v = (v > 360 ? 360 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 4:\r\n        {\r\n            v = (v > 180 ? 180 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 5;\r\n\r\n        if (index < this.p_148.getNumParameters())\r\n            return this.p_148.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_148.getNumParameters();\r\n\r\n        if (index < this.p_149.getNumParameters())\r\n            return this.p_149.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_149.getNumParameters();\r\n\r\n        if (index < this.p_150.getNumParameters())\r\n            return this.p_150.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_150.getNumParameters();\r\n\r\n        if (index < this.p_151.getNumParameters())\r\n            return this.p_151.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_151.getNumParameters();\r\n\r\n        if (index < this.p_152.getNumParameters())\r\n            return this.p_152.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "subpatches": {
            "p_148": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_149": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_150": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_151": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_152": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_234": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 3:\r\n    case 7:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 10:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 180 ? 180 : value));\r\n            let normalizedValue = (value - 0) / (180 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 4:\r\n    case 6:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 360 ? 360 : value));\r\n            let normalizedValue = (value - 0) / (360 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 2:\r\n    case 9:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 0.9 ? 0.9 : value));\r\n            let normalizedValue = (value - 0) / (0.9 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 1:\r\n    case 5:\r\n        {\r\n            value = (value < 20 ? 20 : (value > 1200 ? 1200 : value));\r\n            let normalizedValue = (value - 20) / (1200 - 20);\r\n            return normalizedValue;\r\n        }\r\n    case 11:\r\n        {\r\n            value = (value < 2000 ? 2000 : (value > 10000 ? 10000 : value));\r\n            let normalizedValue = (value - 2000) / (10000 - 2000);\r\n            return normalizedValue;\r\n        }\r\n    case 0:\r\n        {\r\n            value = (value < -12.9 ? -12.9 : (value > -2.5 ? -2.5 : value));\r\n            let normalizedValue = (value - -12.9) / (-2.5 - -12.9);\r\n            return normalizedValue;\r\n        }\r\n    case 8:\r\n        {\r\n            value = (value < -90 ? -90 : (value > 90 ? 90 : value));\r\n            let normalizedValue = (value - -90) / (90 - -90);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 12;\r\n\r\n        if (index < this.p_153.getNumParameters())\r\n            return this.p_153.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_153.getNumParameters();\r\n\r\n        if (index < this.p_154.getNumParameters())\r\n            return this.p_154.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_154.getNumParameters();\r\n\r\n        if (index < this.p_155.getNumParameters())\r\n            return this.p_155.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_155.getNumParameters();\r\n\r\n        if (index < this.p_156.getNumParameters())\r\n            return this.p_156.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 3:\r\n    case 7:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    case 10:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (180 - 0);\r\n            }\r\n        }\r\n    case 4:\r\n    case 6:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (360 - 0);\r\n            }\r\n        }\r\n    case 2:\r\n    case 9:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (0.9 - 0);\r\n            }\r\n        }\r\n    case 1:\r\n    case 5:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 20 + value * (1200 - 20);\r\n            }\r\n        }\r\n    case 11:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 2000 + value * (10000 - 2000);\r\n            }\r\n        }\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return -12.9 + value * (-2.5 - -12.9);\r\n            }\r\n        }\r\n    case 8:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return -90 + value * (90 - -90);\r\n            }\r\n        }\r\n    default:\r\n        index -= 12;\r\n\r\n        if (index < this.p_153.getNumParameters())\r\n            return this.p_153.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_153.getNumParameters();\r\n\r\n        if (index < this.p_154.getNumParameters())\r\n            return this.p_154.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_154.getNumParameters();\r\n\r\n        if (index < this.p_155.getNumParameters())\r\n            return this.p_155.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_155.getNumParameters();\r\n\r\n        if (index < this.p_156.getNumParameters())\r\n            return this.p_156.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "getNumParameters": "function getNumParameters() {\r\n    return 12 + this.p_153.getNumParameters() + this.p_154.getNumParameters() + this.p_155.getNumParameters() + this.p_156.getNumParameters();\r\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > -2.5 ? -2.5 : (v < -12.9 ? -12.9 : v));\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 1200 ? 1200 : (v < 20 ? 20 : v));\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 0.9 ? 0.9 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 3:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 4:\r\n        {\r\n            v = (v > 360 ? 360 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 5:\r\n        {\r\n            v = (v > 1200 ? 1200 : (v < 20 ? 20 : v));\r\n            return v;\r\n        }\r\n    case 6:\r\n        {\r\n            v = (v > 360 ? 360 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 7:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 8:\r\n        {\r\n            v = (v > 90 ? 90 : (v < -90 ? -90 : v));\r\n            return v;\r\n        }\r\n    case 9:\r\n        {\r\n            v = (v > 0.9 ? 0.9 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 10:\r\n        {\r\n            v = (v > 180 ? 180 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 11:\r\n        {\r\n            v = (v > 10000 ? 10000 : (v < 2000 ? 2000 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 12;\r\n\r\n        if (index < this.p_153.getNumParameters())\r\n            return this.p_153.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_153.getNumParameters();\r\n\r\n        if (index < this.p_154.getNumParameters())\r\n            return this.p_154.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_154.getNumParameters();\r\n\r\n        if (index < this.p_155.getNumParameters())\r\n            return this.p_155.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_155.getNumParameters();\r\n\r\n        if (index < this.p_156.getNumParameters())\r\n            return this.p_156.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "subpatches": {
            "p_153": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_154": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_155": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_156": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_235": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 3:\r\n        {\r\n            value = (value < 100 ? 100 : (value > 4000 ? 4000 : value));\r\n            let normalizedValue = (value - 100) / (4000 - 100);\r\n            return normalizedValue;\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < 0.1 ? 0.1 : (value > 0.9 ? 0.9 : value));\r\n            let normalizedValue = (value - 0.1) / (0.9 - 0.1);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 4;\r\n\r\n        if (index < this.p_161.getNumParameters())\r\n            return this.p_161.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_161.getNumParameters();\r\n\r\n        if (index < this.p_162.getNumParameters())\r\n            return this.p_162.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_162.getNumParameters();\r\n\r\n        if (index < this.p_163.getNumParameters())\r\n            return this.p_163.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    case 3:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 100 + value * (4000 - 100);\r\n            }\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0.1 + value * (0.9 - 0.1);\r\n            }\r\n        }\r\n    default:\r\n        index -= 4;\r\n\r\n        if (index < this.p_161.getNumParameters())\r\n            return this.p_161.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_161.getNumParameters();\r\n\r\n        if (index < this.p_162.getNumParameters())\r\n            return this.p_162.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_162.getNumParameters();\r\n\r\n        if (index < this.p_163.getNumParameters())\r\n            return this.p_163.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "getNumParameters": "function getNumParameters() {\r\n    return 4 + this.p_161.getNumParameters() + this.p_162.getNumParameters() + this.p_163.getNumParameters();\r\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 0.9 ? 0.9 : (v < 0.1 ? 0.1 : v));\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 3:\r\n        {\r\n            v = (v > 4000 ? 4000 : (v < 100 ? 100 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 4;\r\n\r\n        if (index < this.p_161.getNumParameters())\r\n            return this.p_161.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_161.getNumParameters();\r\n\r\n        if (index < this.p_162.getNumParameters())\r\n            return this.p_162.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_162.getNumParameters();\r\n\r\n        if (index < this.p_163.getNumParameters())\r\n            return this.p_163.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "subpatches": {
            "p_161": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_157.getNumParameters())\r\n            return this.p_157.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_157.getNumParameters();\r\n\r\n        if (index < this.p_158.getNumParameters())\r\n            return this.p_158.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_157.getNumParameters())\r\n            return this.p_157.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_157.getNumParameters();\r\n\r\n        if (index < this.p_158.getNumParameters())\r\n            return this.p_158.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_157.getNumParameters() + this.p_158.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_157.getNumParameters())\r\n            return this.p_157.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_157.getNumParameters();\r\n\r\n        if (index < this.p_158.getNumParameters())\r\n            return this.p_158.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_157": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_158": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_162": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_159.getNumParameters())\r\n            return this.p_159.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_159.getNumParameters();\r\n\r\n        if (index < this.p_160.getNumParameters())\r\n            return this.p_160.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_159.getNumParameters())\r\n            return this.p_159.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_159.getNumParameters();\r\n\r\n        if (index < this.p_160.getNumParameters())\r\n            return this.p_160.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_159.getNumParameters() + this.p_160.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_159.getNumParameters())\r\n            return this.p_159.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_159.getNumParameters();\r\n\r\n        if (index < this.p_160.getNumParameters())\r\n            return this.p_160.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_159": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_160": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_163": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_236": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 360 ? 360 : value));\r\n            let normalizedValue = (value - 0) / (360 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < 1 ? 1 : (value > 12 ? 12 : value));\r\n            let normalizedValue = (value - 1) / (12 - 1);\r\n            return normalizedValue;\r\n        }\r\n    case 5:\r\n        {\r\n            value = (value < 50 ? 50 : (value > 5000 ? 5000 : value));\r\n            let normalizedValue = (value - 50) / (5000 - 50);\r\n            return normalizedValue;\r\n        }\r\n    case 3:\r\n        {\r\n            value = (value < 300 ? 300 : (value > 5000 ? 5000 : value));\r\n            let normalizedValue = (value - 300) / (5000 - 300);\r\n            return normalizedValue;\r\n        }\r\n    case 7:\r\n        {\r\n            value = (value < 400 ? 400 : (value > 6000 ? 6000 : value));\r\n            let normalizedValue = (value - 400) / (6000 - 400);\r\n            return normalizedValue;\r\n        }\r\n    case 6:\r\n        {\r\n            value = (value < 500 ? 500 : (value > 8000 ? 8000 : value));\r\n            let normalizedValue = (value - 500) / (8000 - 500);\r\n            return normalizedValue;\r\n        }\r\n    case 4:\r\n        {\r\n            value = (value < -90 ? -90 : (value > 90 ? 90 : value));\r\n            let normalizedValue = (value - -90) / (90 - -90);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 8;\r\n\r\n        if (index < this.p_166.getNumParameters())\r\n            return this.p_166.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_166.getNumParameters();\r\n\r\n        if (index < this.p_167.getNumParameters())\r\n            return this.p_167.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_167.getNumParameters();\r\n\r\n        if (index < this.p_168.getNumParameters())\r\n            return this.p_168.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_168.getNumParameters();\r\n\r\n        if (index < this.p_169.getNumParameters())\r\n            return this.p_169.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_169.getNumParameters();\r\n\r\n        if (index < this.p_170.getNumParameters())\r\n            return this.p_170.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_170.getNumParameters();\r\n\r\n        if (index < this.p_171.getNumParameters())\r\n            return this.p_171.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_171.getNumParameters();\r\n\r\n        if (index < this.p_172.getNumParameters())\r\n            return this.p_172.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (360 - 0);\r\n            }\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 1 + value * (12 - 1);\r\n            }\r\n        }\r\n    case 5:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 50 + value * (5000 - 50);\r\n            }\r\n        }\r\n    case 3:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 300 + value * (5000 - 300);\r\n            }\r\n        }\r\n    case 7:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 400 + value * (6000 - 400);\r\n            }\r\n        }\r\n    case 6:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 500 + value * (8000 - 500);\r\n            }\r\n        }\r\n    case 4:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return -90 + value * (90 - -90);\r\n            }\r\n        }\r\n    default:\r\n        index -= 8;\r\n\r\n        if (index < this.p_166.getNumParameters())\r\n            return this.p_166.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_166.getNumParameters();\r\n\r\n        if (index < this.p_167.getNumParameters())\r\n            return this.p_167.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_167.getNumParameters();\r\n\r\n        if (index < this.p_168.getNumParameters())\r\n            return this.p_168.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_168.getNumParameters();\r\n\r\n        if (index < this.p_169.getNumParameters())\r\n            return this.p_169.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_169.getNumParameters();\r\n\r\n        if (index < this.p_170.getNumParameters())\r\n            return this.p_170.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_170.getNumParameters();\r\n\r\n        if (index < this.p_171.getNumParameters())\r\n            return this.p_171.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_171.getNumParameters();\r\n\r\n        if (index < this.p_172.getNumParameters())\r\n            return this.p_172.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "getNumParameters": "function getNumParameters() {\r\n    return 8 + this.p_166.getNumParameters() + this.p_167.getNumParameters() + this.p_168.getNumParameters() + this.p_169.getNumParameters() + this.p_170.getNumParameters() + this.p_171.getNumParameters() + this.p_172.getNumParameters();\r\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 360 ? 360 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 12 ? 12 : (v < 1 ? 1 : v));\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 3:\r\n        {\r\n            v = (v > 5000 ? 5000 : (v < 300 ? 300 : v));\r\n            return v;\r\n        }\r\n    case 4:\r\n        {\r\n            v = (v > 90 ? 90 : (v < -90 ? -90 : v));\r\n            return v;\r\n        }\r\n    case 5:\r\n        {\r\n            v = (v > 5000 ? 5000 : (v < 50 ? 50 : v));\r\n            return v;\r\n        }\r\n    case 6:\r\n        {\r\n            v = (v > 8000 ? 8000 : (v < 500 ? 500 : v));\r\n            return v;\r\n        }\r\n    case 7:\r\n        {\r\n            v = (v > 6000 ? 6000 : (v < 400 ? 400 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 8;\r\n\r\n        if (index < this.p_166.getNumParameters())\r\n            return this.p_166.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_166.getNumParameters();\r\n\r\n        if (index < this.p_167.getNumParameters())\r\n            return this.p_167.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_167.getNumParameters();\r\n\r\n        if (index < this.p_168.getNumParameters())\r\n            return this.p_168.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_168.getNumParameters();\r\n\r\n        if (index < this.p_169.getNumParameters())\r\n            return this.p_169.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_169.getNumParameters();\r\n\r\n        if (index < this.p_170.getNumParameters())\r\n            return this.p_170.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_170.getNumParameters();\r\n\r\n        if (index < this.p_171.getNumParameters())\r\n            return this.p_171.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_171.getNumParameters();\r\n\r\n        if (index < this.p_172.getNumParameters())\r\n            return this.p_172.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "subpatches": {
            "p_166": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_167": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_168": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_169": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_170": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_164.getNumParameters())\r\n            return this.p_164.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_164.getNumParameters())\r\n            return this.p_164.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_164.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_164.getNumParameters())\r\n            return this.p_164.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_164": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_171": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_172": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_165.getNumParameters())\r\n            return this.p_165.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_165.getNumParameters())\r\n            return this.p_165.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_165.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_165.getNumParameters())\r\n            return this.p_165.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_165": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_237": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 3:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 90 ? 90 : value));\r\n            let normalizedValue = (value - 0) / (90 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 180 ? 180 : value));\r\n            let normalizedValue = (value - 0) / (180 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 6:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 360 ? 360 : value));\r\n            let normalizedValue = (value - 0) / (360 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < 100 ? 100 : (value > 22000 ? 22000 : value));\r\n            let normalizedValue = (value - 100) / (22000 - 100);\r\n            return normalizedValue;\r\n        }\r\n    case 5:\r\n        {\r\n            value = (value < 500 ? 500 : (value > 3000 ? 3000 : value));\r\n            let normalizedValue = (value - 500) / (3000 - 500);\r\n            return normalizedValue;\r\n        }\r\n    case 4:\r\n        {\r\n            value = (value < -4.92 ? -4.92 : (value > -2.98 ? -2.98 : value));\r\n            let normalizedValue = (value - -4.92) / (-2.98 - -4.92);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 7;\r\n\r\n        if (index < this.p_176.getNumParameters())\r\n            return this.p_176.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_176.getNumParameters();\r\n\r\n        if (index < this.p_177.getNumParameters())\r\n            return this.p_177.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_177.getNumParameters();\r\n\r\n        if (index < this.p_178.getNumParameters())\r\n            return this.p_178.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_178.getNumParameters();\r\n\r\n        if (index < this.p_179.getNumParameters())\r\n            return this.p_179.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_179.getNumParameters();\r\n\r\n        if (index < this.p_180.getNumParameters())\r\n            return this.p_180.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    case 3:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (90 - 0);\r\n            }\r\n        }\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (180 - 0);\r\n            }\r\n        }\r\n    case 6:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (360 - 0);\r\n            }\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 100 + value * (22000 - 100);\r\n            }\r\n        }\r\n    case 5:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 500 + value * (3000 - 500);\r\n            }\r\n        }\r\n    case 4:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return -4.92 + value * (-2.98 - -4.92);\r\n            }\r\n        }\r\n    default:\r\n        index -= 7;\r\n\r\n        if (index < this.p_176.getNumParameters())\r\n            return this.p_176.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_176.getNumParameters();\r\n\r\n        if (index < this.p_177.getNumParameters())\r\n            return this.p_177.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_177.getNumParameters();\r\n\r\n        if (index < this.p_178.getNumParameters())\r\n            return this.p_178.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_178.getNumParameters();\r\n\r\n        if (index < this.p_179.getNumParameters())\r\n            return this.p_179.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_179.getNumParameters();\r\n\r\n        if (index < this.p_180.getNumParameters())\r\n            return this.p_180.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "getNumParameters": "function getNumParameters() {\r\n    return 7 + this.p_176.getNumParameters() + this.p_177.getNumParameters() + this.p_178.getNumParameters() + this.p_179.getNumParameters() + this.p_180.getNumParameters();\r\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 180 ? 180 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 22000 ? 22000 : (v < 100 ? 100 : v));\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 3:\r\n        {\r\n            v = (v > 90 ? 90 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 4:\r\n        {\r\n            v = (v > -2.98 ? -2.98 : (v < -4.92 ? -4.92 : v));\r\n            return v;\r\n        }\r\n    case 5:\r\n        {\r\n            v = (v > 3000 ? 3000 : (v < 500 ? 500 : v));\r\n            return v;\r\n        }\r\n    case 6:\r\n        {\r\n            v = (v > 360 ? 360 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 7;\r\n\r\n        if (index < this.p_176.getNumParameters())\r\n            return this.p_176.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_176.getNumParameters();\r\n\r\n        if (index < this.p_177.getNumParameters())\r\n            return this.p_177.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_177.getNumParameters();\r\n\r\n        if (index < this.p_178.getNumParameters())\r\n            return this.p_178.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_178.getNumParameters();\r\n\r\n        if (index < this.p_179.getNumParameters())\r\n            return this.p_179.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_179.getNumParameters();\r\n\r\n        if (index < this.p_180.getNumParameters())\r\n            return this.p_180.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "subpatches": {
            "p_176": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_173.getNumParameters())\r\n            return this.p_173.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_173.getNumParameters())\r\n            return this.p_173.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_173.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_173.getNumParameters())\r\n            return this.p_173.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_173": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_177": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_174.getNumParameters())\r\n            return this.p_174.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_174.getNumParameters())\r\n            return this.p_174.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_174.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_174.getNumParameters())\r\n            return this.p_174.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_174": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_178": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_175.getNumParameters())\r\n            return this.p_175.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_175.getNumParameters())\r\n            return this.p_175.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_175.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_175.getNumParameters())\r\n            return this.p_175.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_175": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_179": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_180": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_238": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 6:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 90 ? 90 : value));\r\n            let normalizedValue = (value - 0) / (90 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 4:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 180 ? 180 : value));\r\n            let normalizedValue = (value - 0) / (180 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 7:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 360 ? 360 : value));\r\n            let normalizedValue = (value - 0) / (360 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 3:\r\n        {\r\n            value = (value < 1000 ? 1000 : (value > 4000 ? 4000 : value));\r\n            let normalizedValue = (value - 1000) / (4000 - 1000);\r\n            return normalizedValue;\r\n        }\r\n    case 2:\r\n        {\r\n            value = (value < 0.1 ? 0.1 : (value > 0.25 ? 0.25 : value));\r\n            let normalizedValue = (value - 0.1) / (0.25 - 0.1);\r\n            return normalizedValue;\r\n        }\r\n    case 5:\r\n        {\r\n            value = (value < -2.94 ? -2.94 : (value > -1.66 ? -1.66 : value));\r\n            let normalizedValue = (value - -2.94) / (-1.66 - -2.94);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 8;\r\n\r\n        if (index < this.p_199.getNumParameters())\r\n            return this.p_199.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_199.getNumParameters();\r\n\r\n        if (index < this.p_200.getNumParameters())\r\n            return this.p_200.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_200.getNumParameters();\r\n\r\n        if (index < this.p_201.getNumParameters())\r\n            return this.p_201.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_201.getNumParameters();\r\n\r\n        if (index < this.p_202.getNumParameters())\r\n            return this.p_202.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_202.getNumParameters();\r\n\r\n        if (index < this.p_203.getNumParameters())\r\n            return this.p_203.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_203.getNumParameters();\r\n\r\n        if (index < this.p_204.getNumParameters())\r\n            return this.p_204.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_204.getNumParameters();\r\n\r\n        if (index < this.p_205.getNumParameters())\r\n            return this.p_205.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_205.getNumParameters();\r\n\r\n        if (index < this.p_206.getNumParameters())\r\n            return this.p_206.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_206.getNumParameters();\r\n\r\n        if (index < this.p_207.getNumParameters())\r\n            return this.p_207.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_207.getNumParameters();\r\n\r\n        if (index < this.p_208.getNumParameters())\r\n            return this.p_208.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_208.getNumParameters();\r\n\r\n        if (index < this.p_209.getNumParameters())\r\n            return this.p_209.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 6:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (90 - 0);\r\n            }\r\n        }\r\n    case 4:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (180 - 0);\r\n            }\r\n        }\r\n    case 7:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (360 - 0);\r\n            }\r\n        }\r\n    case 3:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 1000 + value * (4000 - 1000);\r\n            }\r\n        }\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0.1 + value * (0.25 - 0.1);\r\n            }\r\n        }\r\n    case 5:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return -2.94 + value * (-1.66 - -2.94);\r\n            }\r\n        }\r\n    default:\r\n        index -= 8;\r\n\r\n        if (index < this.p_199.getNumParameters())\r\n            return this.p_199.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_199.getNumParameters();\r\n\r\n        if (index < this.p_200.getNumParameters())\r\n            return this.p_200.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_200.getNumParameters();\r\n\r\n        if (index < this.p_201.getNumParameters())\r\n            return this.p_201.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_201.getNumParameters();\r\n\r\n        if (index < this.p_202.getNumParameters())\r\n            return this.p_202.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_202.getNumParameters();\r\n\r\n        if (index < this.p_203.getNumParameters())\r\n            return this.p_203.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_203.getNumParameters();\r\n\r\n        if (index < this.p_204.getNumParameters())\r\n            return this.p_204.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_204.getNumParameters();\r\n\r\n        if (index < this.p_205.getNumParameters())\r\n            return this.p_205.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_205.getNumParameters();\r\n\r\n        if (index < this.p_206.getNumParameters())\r\n            return this.p_206.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_206.getNumParameters();\r\n\r\n        if (index < this.p_207.getNumParameters())\r\n            return this.p_207.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_207.getNumParameters();\r\n\r\n        if (index < this.p_208.getNumParameters())\r\n            return this.p_208.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_208.getNumParameters();\r\n\r\n        if (index < this.p_209.getNumParameters())\r\n            return this.p_209.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "getNumParameters": "function getNumParameters() {\r\n    return 8 + this.p_199.getNumParameters() + this.p_200.getNumParameters() + this.p_201.getNumParameters() + this.p_202.getNumParameters() + this.p_203.getNumParameters() + this.p_204.getNumParameters() + this.p_205.getNumParameters() + this.p_206.getNumParameters() + this.p_207.getNumParameters() + this.p_208.getNumParameters() + this.p_209.getNumParameters();\r\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 90 ? 90 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 0.25 ? 0.25 : (v < 0.1 ? 0.1 : v));\r\n            return v;\r\n        }\r\n    case 3:\r\n        {\r\n            v = (v > 4000 ? 4000 : (v < 1000 ? 1000 : v));\r\n            return v;\r\n        }\r\n    case 4:\r\n        {\r\n            v = (v > 180 ? 180 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 5:\r\n        {\r\n            v = (v > -1.66 ? -1.66 : (v < -2.94 ? -2.94 : v));\r\n            return v;\r\n        }\r\n    case 6:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 7:\r\n        {\r\n            v = (v > 360 ? 360 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 8;\r\n\r\n        if (index < this.p_199.getNumParameters())\r\n            return this.p_199.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_199.getNumParameters();\r\n\r\n        if (index < this.p_200.getNumParameters())\r\n            return this.p_200.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_200.getNumParameters();\r\n\r\n        if (index < this.p_201.getNumParameters())\r\n            return this.p_201.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_201.getNumParameters();\r\n\r\n        if (index < this.p_202.getNumParameters())\r\n            return this.p_202.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_202.getNumParameters();\r\n\r\n        if (index < this.p_203.getNumParameters())\r\n            return this.p_203.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_203.getNumParameters();\r\n\r\n        if (index < this.p_204.getNumParameters())\r\n            return this.p_204.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_204.getNumParameters();\r\n\r\n        if (index < this.p_205.getNumParameters())\r\n            return this.p_205.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_205.getNumParameters();\r\n\r\n        if (index < this.p_206.getNumParameters())\r\n            return this.p_206.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_206.getNumParameters();\r\n\r\n        if (index < this.p_207.getNumParameters())\r\n            return this.p_207.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_207.getNumParameters();\r\n\r\n        if (index < this.p_208.getNumParameters())\r\n            return this.p_208.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_208.getNumParameters();\r\n\r\n        if (index < this.p_209.getNumParameters())\r\n            return this.p_209.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "subpatches": {
            "p_199": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_183.getNumParameters())\r\n            return this.p_183.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_183.getNumParameters())\r\n            return this.p_183.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_183.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_183.getNumParameters())\r\n            return this.p_183.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_183": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_181.getNumParameters())\r\n            return this.p_181.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_181.getNumParameters();\r\n\r\n        if (index < this.p_182.getNumParameters())\r\n            return this.p_182.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_181.getNumParameters())\r\n            return this.p_181.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_181.getNumParameters();\r\n\r\n        if (index < this.p_182.getNumParameters())\r\n            return this.p_182.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_181.getNumParameters() + this.p_182.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_181.getNumParameters())\r\n            return this.p_181.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_181.getNumParameters();\r\n\r\n        if (index < this.p_182.getNumParameters())\r\n            return this.p_182.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_181": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_182": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_200": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_201": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_184.getNumParameters())\r\n            return this.p_184.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_184.getNumParameters();\r\n\r\n        if (index < this.p_185.getNumParameters())\r\n            return this.p_185.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_185.getNumParameters();\r\n\r\n        if (index < this.p_186.getNumParameters())\r\n            return this.p_186.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_184.getNumParameters())\r\n            return this.p_184.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_184.getNumParameters();\r\n\r\n        if (index < this.p_185.getNumParameters())\r\n            return this.p_185.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_185.getNumParameters();\r\n\r\n        if (index < this.p_186.getNumParameters())\r\n            return this.p_186.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_184.getNumParameters() + this.p_185.getNumParameters() + this.p_186.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_184.getNumParameters())\r\n            return this.p_184.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_184.getNumParameters();\r\n\r\n        if (index < this.p_185.getNumParameters())\r\n            return this.p_185.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_185.getNumParameters();\r\n\r\n        if (index < this.p_186.getNumParameters())\r\n            return this.p_186.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_184": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_185": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_186": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_202": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_189.getNumParameters())\r\n            return this.p_189.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_189.getNumParameters();\r\n\r\n        if (index < this.p_190.getNumParameters())\r\n            return this.p_190.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_189.getNumParameters())\r\n            return this.p_189.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_189.getNumParameters();\r\n\r\n        if (index < this.p_190.getNumParameters())\r\n            return this.p_190.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_189.getNumParameters() + this.p_190.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_189.getNumParameters())\r\n            return this.p_189.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_189.getNumParameters();\r\n\r\n        if (index < this.p_190.getNumParameters())\r\n            return this.p_190.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_189": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_187.getNumParameters())\r\n            return this.p_187.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_187.getNumParameters();\r\n\r\n        if (index < this.p_188.getNumParameters())\r\n            return this.p_188.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_187.getNumParameters())\r\n            return this.p_187.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_187.getNumParameters();\r\n\r\n        if (index < this.p_188.getNumParameters())\r\n            return this.p_188.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_187.getNumParameters() + this.p_188.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_187.getNumParameters())\r\n            return this.p_187.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_187.getNumParameters();\r\n\r\n        if (index < this.p_188.getNumParameters())\r\n            return this.p_188.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_187": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_188": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_190": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_203": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_191.getNumParameters())\r\n            return this.p_191.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_191.getNumParameters();\r\n\r\n        if (index < this.p_192.getNumParameters())\r\n            return this.p_192.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_191.getNumParameters())\r\n            return this.p_191.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_191.getNumParameters();\r\n\r\n        if (index < this.p_192.getNumParameters())\r\n            return this.p_192.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_191.getNumParameters() + this.p_192.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_191.getNumParameters())\r\n            return this.p_191.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_191.getNumParameters();\r\n\r\n        if (index < this.p_192.getNumParameters())\r\n            return this.p_192.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_191": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_192": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_204": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_205": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_195.getNumParameters())\r\n            return this.p_195.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_195.getNumParameters();\r\n\r\n        if (index < this.p_196.getNumParameters())\r\n            return this.p_196.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_195.getNumParameters())\r\n            return this.p_195.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_195.getNumParameters();\r\n\r\n        if (index < this.p_196.getNumParameters())\r\n            return this.p_196.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_195.getNumParameters() + this.p_196.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_195.getNumParameters())\r\n            return this.p_195.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_195.getNumParameters();\r\n\r\n        if (index < this.p_196.getNumParameters())\r\n            return this.p_196.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_195": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_193.getNumParameters())\r\n            return this.p_193.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_193.getNumParameters();\r\n\r\n        if (index < this.p_194.getNumParameters())\r\n            return this.p_194.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_193.getNumParameters())\r\n            return this.p_193.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_193.getNumParameters();\r\n\r\n        if (index < this.p_194.getNumParameters())\r\n            return this.p_194.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_193.getNumParameters() + this.p_194.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_193.getNumParameters())\r\n            return this.p_193.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_193.getNumParameters();\r\n\r\n        if (index < this.p_194.getNumParameters())\r\n            return this.p_194.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_193": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_194": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_196": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_206": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_197.getNumParameters())\r\n            return this.p_197.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_197.getNumParameters();\r\n\r\n        if (index < this.p_198.getNumParameters())\r\n            return this.p_198.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_197.getNumParameters())\r\n            return this.p_197.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_197.getNumParameters();\r\n\r\n        if (index < this.p_198.getNumParameters())\r\n            return this.p_198.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_197.getNumParameters() + this.p_198.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_197.getNumParameters())\r\n            return this.p_197.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_197.getNumParameters();\r\n\r\n        if (index < this.p_198.getNumParameters())\r\n            return this.p_198.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_197": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_198": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_207": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_208": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_209": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_239": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 4:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 180 ? 180 : value));\r\n            let normalizedValue = (value - 0) / (180 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 5:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 360 ? 360 : value));\r\n            let normalizedValue = (value - 0) / (360 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 2:\r\n        {\r\n            value = (value < 80 ? 80 : (value > 127 ? 127 : value));\r\n            let normalizedValue = (value - 80) / (127 - 80);\r\n            return normalizedValue;\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < -90 ? -90 : (value > 90 ? 90 : value));\r\n            let normalizedValue = (value - -90) / (90 - -90);\r\n            return normalizedValue;\r\n        }\r\n    case 3:\r\n        {\r\n            value = (value < 5.38 ? 5.38 : (value > 6.03 ? 6.03 : value));\r\n            let normalizedValue = (value - 5.38) / (6.03 - 5.38);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 6;\r\n\r\n        if (index < this.p_225.getNumParameters())\r\n            return this.p_225.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_225.getNumParameters();\r\n\r\n        if (index < this.p_226.getNumParameters())\r\n            return this.p_226.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_226.getNumParameters();\r\n\r\n        if (index < this.p_227.getNumParameters())\r\n            return this.p_227.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_227.getNumParameters();\r\n\r\n        if (index < this.p_228.getNumParameters())\r\n            return this.p_228.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    case 4:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (180 - 0);\r\n            }\r\n        }\r\n    case 5:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (360 - 0);\r\n            }\r\n        }\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 80 + value * (127 - 80);\r\n            }\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return -90 + value * (90 - -90);\r\n            }\r\n        }\r\n    case 3:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 5.38 + value * (6.03 - 5.38);\r\n            }\r\n        }\r\n    default:\r\n        index -= 6;\r\n\r\n        if (index < this.p_225.getNumParameters())\r\n            return this.p_225.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_225.getNumParameters();\r\n\r\n        if (index < this.p_226.getNumParameters())\r\n            return this.p_226.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_226.getNumParameters();\r\n\r\n        if (index < this.p_227.getNumParameters())\r\n            return this.p_227.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_227.getNumParameters();\r\n\r\n        if (index < this.p_228.getNumParameters())\r\n            return this.p_228.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "getNumParameters": "function getNumParameters() {\r\n    return 6 + this.p_225.getNumParameters() + this.p_226.getNumParameters() + this.p_227.getNumParameters() + this.p_228.getNumParameters();\r\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 90 ? 90 : (v < -90 ? -90 : v));\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 127 ? 127 : (v < 80 ? 80 : v));\r\n            return v;\r\n        }\r\n    case 3:\r\n        {\r\n            v = (v > 6.03 ? 6.03 : (v < 5.38 ? 5.38 : v));\r\n            return v;\r\n        }\r\n    case 4:\r\n        {\r\n            v = (v > 180 ? 180 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 5:\r\n        {\r\n            v = (v > 360 ? 360 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 6;\r\n\r\n        if (index < this.p_225.getNumParameters())\r\n            return this.p_225.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_225.getNumParameters();\r\n\r\n        if (index < this.p_226.getNumParameters())\r\n            return this.p_226.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_226.getNumParameters();\r\n\r\n        if (index < this.p_227.getNumParameters())\r\n            return this.p_227.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_227.getNumParameters();\r\n\r\n        if (index < this.p_228.getNumParameters())\r\n            return this.p_228.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "subpatches": {
            "p_225": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n    case 1:\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\r\n            let normalizedValue = (value - 0) / (100 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 3;\r\n\r\n        if (index < this.p_218.getNumParameters())\r\n            return this.p_218.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_218.getNumParameters();\r\n\r\n        if (index < this.p_219.getNumParameters())\r\n            return this.p_219.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_219.getNumParameters();\r\n\r\n        if (index < this.p_220.getNumParameters())\r\n            return this.p_220.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_220.getNumParameters();\r\n\r\n        if (index < this.p_221.getNumParameters())\r\n            return this.p_221.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_221.getNumParameters();\r\n\r\n        if (index < this.p_222.getNumParameters())\r\n            return this.p_222.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_222.getNumParameters();\r\n\r\n        if (index < this.p_223.getNumParameters())\r\n            return this.p_223.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_223.getNumParameters();\r\n\r\n        if (index < this.p_224.getNumParameters())\r\n            return this.p_224.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n    case 1:\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (100 - 0);\r\n            }\r\n        }\r\n    default:\r\n        index -= 3;\r\n\r\n        if (index < this.p_218.getNumParameters())\r\n            return this.p_218.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_218.getNumParameters();\r\n\r\n        if (index < this.p_219.getNumParameters())\r\n            return this.p_219.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_219.getNumParameters();\r\n\r\n        if (index < this.p_220.getNumParameters())\r\n            return this.p_220.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_220.getNumParameters();\r\n\r\n        if (index < this.p_221.getNumParameters())\r\n            return this.p_221.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_221.getNumParameters();\r\n\r\n        if (index < this.p_222.getNumParameters())\r\n            return this.p_222.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_222.getNumParameters();\r\n\r\n        if (index < this.p_223.getNumParameters())\r\n            return this.p_223.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_223.getNumParameters();\r\n\r\n        if (index < this.p_224.getNumParameters())\r\n            return this.p_224.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 3 + this.p_218.getNumParameters() + this.p_219.getNumParameters() + this.p_220.getNumParameters() + this.p_221.getNumParameters() + this.p_222.getNumParameters() + this.p_223.getNumParameters() + this.p_224.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 3;\r\n\r\n        if (index < this.p_218.getNumParameters())\r\n            return this.p_218.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_218.getNumParameters();\r\n\r\n        if (index < this.p_219.getNumParameters())\r\n            return this.p_219.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_219.getNumParameters();\r\n\r\n        if (index < this.p_220.getNumParameters())\r\n            return this.p_220.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_220.getNumParameters();\r\n\r\n        if (index < this.p_221.getNumParameters())\r\n            return this.p_221.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_221.getNumParameters();\r\n\r\n        if (index < this.p_222.getNumParameters())\r\n            return this.p_222.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_222.getNumParameters();\r\n\r\n        if (index < this.p_223.getNumParameters())\r\n            return this.p_223.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_223.getNumParameters();\r\n\r\n        if (index < this.p_224.getNumParameters())\r\n            return this.p_224.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_218": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_210.getNumParameters())\r\n            return this.p_210.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_210.getNumParameters();\r\n\r\n        if (index < this.p_211.getNumParameters())\r\n            return this.p_211.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_211.getNumParameters();\r\n\r\n        if (index < this.p_212.getNumParameters())\r\n            return this.p_212.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_212.getNumParameters();\r\n\r\n        if (index < this.p_213.getNumParameters())\r\n            return this.p_213.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_213.getNumParameters();\r\n\r\n        if (index < this.p_214.getNumParameters())\r\n            return this.p_214.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_214.getNumParameters();\r\n\r\n        if (index < this.p_215.getNumParameters())\r\n            return this.p_215.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_215.getNumParameters();\r\n\r\n        if (index < this.p_216.getNumParameters())\r\n            return this.p_216.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_216.getNumParameters();\r\n\r\n        if (index < this.p_217.getNumParameters())\r\n            return this.p_217.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_210.getNumParameters())\r\n            return this.p_210.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_210.getNumParameters();\r\n\r\n        if (index < this.p_211.getNumParameters())\r\n            return this.p_211.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_211.getNumParameters();\r\n\r\n        if (index < this.p_212.getNumParameters())\r\n            return this.p_212.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_212.getNumParameters();\r\n\r\n        if (index < this.p_213.getNumParameters())\r\n            return this.p_213.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_213.getNumParameters();\r\n\r\n        if (index < this.p_214.getNumParameters())\r\n            return this.p_214.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_214.getNumParameters();\r\n\r\n        if (index < this.p_215.getNumParameters())\r\n            return this.p_215.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_215.getNumParameters();\r\n\r\n        if (index < this.p_216.getNumParameters())\r\n            return this.p_216.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_216.getNumParameters();\r\n\r\n        if (index < this.p_217.getNumParameters())\r\n            return this.p_217.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_210.getNumParameters() + this.p_211.getNumParameters() + this.p_212.getNumParameters() + this.p_213.getNumParameters() + this.p_214.getNumParameters() + this.p_215.getNumParameters() + this.p_216.getNumParameters() + this.p_217.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_210.getNumParameters())\r\n            return this.p_210.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_210.getNumParameters();\r\n\r\n        if (index < this.p_211.getNumParameters())\r\n            return this.p_211.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_211.getNumParameters();\r\n\r\n        if (index < this.p_212.getNumParameters())\r\n            return this.p_212.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_212.getNumParameters();\r\n\r\n        if (index < this.p_213.getNumParameters())\r\n            return this.p_213.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_213.getNumParameters();\r\n\r\n        if (index < this.p_214.getNumParameters())\r\n            return this.p_214.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_214.getNumParameters();\r\n\r\n        if (index < this.p_215.getNumParameters())\r\n            return this.p_215.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_215.getNumParameters();\r\n\r\n        if (index < this.p_216.getNumParameters())\r\n            return this.p_216.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_216.getNumParameters();\r\n\r\n        if (index < this.p_217.getNumParameters())\r\n            return this.p_217.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_210": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_211": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_212": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_213": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_214": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_215": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_216": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_217": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_219": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_220": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_221": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_222": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_223": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_224": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_226": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_227": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_228": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_240": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 11 ? 11 : value));\r\n            let normalizedValue = (value - 0) / (11 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 12);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 87 ? 87 : value));\r\n            let normalizedValue = (value - 0) / (87 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 88);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 12);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (11 - 0);\r\n            }\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 88);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (87 - 0);\r\n            }\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
          "getNumParameters": "function getNumParameters() {\r\n    return 2;\r\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 11 ? 11 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 11 / 11;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 87 ? 87 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 87 / 87;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_241": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
          "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
          "subpatches": {},
          "isPolyphonic": false
        }
      },
      "isPolyphonic": false
    },
    "presetid": "rnbo",
    "meta": {
      "architecture": "x64",
      "filename": "planets.maxpat",
      "rnboobjname": "rnbomatic",
      "maxversion": "8.5.6",
      "rnboversion": "1.2.3",
      "name": "untitled"
    }
  },
  "presets": [
    {
      "name": "untitled",
      "preset": {
        "__sps": {
          "activation": {},
          "constellations": {
            "constell_gate": {
              "value": 0
            },
            "constellation": {
              "value": 0
            }
          },
          "earth": {
            "__sps": {
              "pitch": {
                "__sps": {
                  "jumble": {},
                  "sifting": {}
                }
              },
              "rhythm": {
                "__sps": {
                  "jumble": {},
                  "sifting": {}
                }
              },
              "tempobank": {}
            },
            "env": {
              "value": 0.1
            },
            "gain": {
              "value": 0.5
            },
            "onoff": {
              "value": 0
            },
            "tempo": {
              "value": 100
            }
          },
          "jupiter": {
            "__sps": {
              "constrain": {},
              "conversion": {},
              "harmonies": {
                "__sps": {
                  "jumble": {},
                  "sifting": {}
                }
              },
              "highbank": {},
              "lowbank": {},
              "pitch": {
                "__sps": {
                  "jumble": {},
                  "retune": {},
                  "sifting": {}
                }
              },
              "rhythm": {
                "__sps": {
                  "jumble": {},
                  "sifting": {}
                }
              },
              "saw1": {
                "__sps": {
                  "detune": {
                    "__sps": {
                      "jumble": {},
                      "sifting": {}
                    }
                  }
                }
              },
              "saw2": {
                "__sps": {
                  "detune": {
                    "__sps": {
                      "jumble": {},
                      "sifting": {}
                    }
                  },
                  "retune": {}
                }
              },
              "saw3": {
                "__sps": {
                  "detune": {
                    "__sps": {
                      "jumble": {},
                      "sifting": {}
                    }
                  },
                  "retune": {}
                }
              },
              "tempobank": {}
            },
            "altitude": {
              "value": 0
            },
            "attack": {
              "value": 0.1
            },
            "azimuth": {
              "value": 0
            },
            "elongation": {
              "value": 0
            },
            "magnitude": {
              "value": -1.66
            },
            "onoff": {
              "value": 0
            },
            "q": {
              "value": 0
            },
            "tempo": {
              "value": 1000
            }
          },
          "mars": {
            "__sps": {
              "clack": {
                "__sps": {
                  "real-life": {}
                }
              },
              "clap": {
                "__sps": {
                  "real-life": {}
                }
              },
              "clash": {
                "__sps": {
                  "real-life": {},
                  "retune": {},
                  "retune[1]": {},
                  "retune[2]": {},
                  "retune[3]": {},
                  "retune[4]": {},
                  "retune[5]": {}
                }
              },
              "constrain": {},
              "conversion": {},
              "cowbell": {
                "__sps": {
                  "real-life": {},
                  "retune": {}
                }
              },
              "delay[1]": {},
              "hat": {
                "__sps": {
                  "hatfilt": {},
                  "real-life": {}
                }
              },
              "kick": {
                "__sps": {
                  "real-life": {}
                }
              },
              "protocols": {
                "__sps": {
                  "beats": {},
                  "chosens": {},
                  "patterns": {}
                }
              },
              "snare": {
                "__sps": {
                  "real-life": {}
                }
              },
              "tom": {
                "__sps": {
                  "envelopes": {},
                  "real-life": {}
                }
              }
            },
            "altitude": {
              "value": 0
            },
            "azimuth": {
              "value": 0
            },
            "change_inst": {
              "value": 0
            },
            "delay": {
              "value": 100
            },
            "elongation": {
              "value": 0
            },
            "magnitude": {
              "value": 0
            },
            "onoff": {
              "value": 0
            },
            "tempo": {
              "value": 100
            }
          },
          "mercury": {
            "__sps": {
              "change": {},
              "constrain": {},
              "conversion": {},
              "mercurial": {
                "__sps": {
                  "pitch": {
                    "__sps": {
                      "jumble": {},
                      "retune": {},
                      "sifting": {}
                    }
                  }
                }
              },
              "mercurial[1]": {
                "__sps": {
                  "pitch": {
                    "__sps": {
                      "jumble": {},
                      "retune": {},
                      "sifting": {}
                    }
                  }
                }
              },
              "mercurial[2]": {
                "__sps": {
                  "pitch": {
                    "__sps": {
                      "jumble": {},
                      "retune": {},
                      "sifting": {}
                    }
                  }
                }
              },
              "mercurial[3]": {
                "__sps": {
                  "pitch": {
                    "__sps": {
                      "jumble": {},
                      "retune": {},
                      "sifting": {}
                    }
                  }
                }
              },
              "rhythm": {
                "__sps": {
                  "jumble": {},
                  "sifting": {}
                }
              },
              "tempobank": {}
            },
            "altitude": {
              "value": 0
            },
            "azimuth": {
              "value": 0
            },
            "cut": {
              "value": 0
            },
            "del_time": {
              "value": 20
            },
            "elongation": {
              "value": 0
            },
            "fb": {
              "value": 0
            },
            "magnitude": {
              "value": 0
            },
            "mode": {
              "value": 0
            },
            "onoff": {
              "value": 0
            },
            "q": {
              "value": 0
            },
            "tempo": {
              "value": 100
            }
          },
          "moon": {
            "__sps": {
              "change": {},
              "constrain": {},
              "constrain[1]": {},
              "conversion": {},
              "retune": {}
            },
            "altitude": {
              "value": 0
            },
            "azimuth": {
              "value": 0
            },
            "elongation": {
              "value": 0
            },
            "l_deltime": {
              "value": 20
            },
            "l_fb": {
              "value": 0
            },
            "magnitude": {
              "value": -2.5
            },
            "maxtemp": {
              "value": 2000
            },
            "onoff": {
              "value": 0
            },
            "phase": {
              "value": 0
            },
            "r_deltime": {
              "value": 20
            },
            "r_fb": {
              "value": 0
            },
            "rand_del": {
              "value": 0
            }
          },
          "neptune": {
            "__sps": {
              "constrain": {},
              "conversion": {},
              "freq0": {
                "__sps": {
                  "retune": {}
                }
              },
              "freq1": {
                "__sps": {
                  "retune": {}
                }
              },
              "freq2": {
                "__sps": {
                  "retune": {}
                }
              },
              "freq3": {
                "__sps": {
                  "retune": {}
                }
              },
              "freq4": {
                "__sps": {
                  "retune": {}
                }
              },
              "freq5": {
                "__sps": {
                  "retune": {}
                }
              },
              "freq6": {
                "__sps": {
                  "retune": {}
                }
              },
              "freq7": {
                "__sps": {
                  "retune": {}
                }
              },
              "freq8": {
                "__sps": {
                  "retune": {}
                }
              },
              "freq9": {
                "__sps": {
                  "retune": {}
                }
              },
              "freqE": {
                "__sps": {
                  "retune": {}
                }
              },
              "freqT": {
                "__sps": {
                  "retune": {}
                }
              },
              "ray0": {},
              "ray1": {},
              "ray2": {},
              "ray3": {},
              "ray4": {},
              "ray5": {},
              "ray6": {},
              "ray7": {},
              "ray8": {},
              "ray9": {},
              "rayE": {},
              "rayT": {},
              "shh": {},
              "shh[10]": {},
              "shh[11]": {},
              "shh[1]": {},
              "shh[2]": {},
              "shh[3]": {},
              "shh[4]": {},
              "shh[5]": {},
              "shh[6]": {},
              "shh[7]": {},
              "shh[8]": {},
              "shh[9]": {}
            },
            "altitude": {
              "value": 0
            },
            "azimuth": {
              "value": 0
            },
            "elongation": {
              "value": 0
            },
            "magnitude": {
              "value": 7.67
            },
            "onoff": {
              "value": 0
            },
            "q": {
              "value": 0
            },
            "tempo": {
              "value": 100
            }
          },
          "pluto": {
            "__sps": {
              "Q": {},
              "constrain": {},
              "conversion": {},
              "cutoff": {},
              "gain": {}
            },
            "altitude": {
              "value": 0
            },
            "au": {
              "value": 30
            },
            "azimuth": {
              "value": 0
            },
            "elongation": {
              "value": 0
            },
            "onoff": {
              "value": 0
            }
          },
          "saturn": {
            "__sps": {
              "change": {},
              "constrain": {},
              "conversion": {},
              "rhythm": {
                "__sps": {
                  "jumble": {},
                  "sifting": {}
                }
              },
              "sat": {
                "__sps": {
                  "pitch": {
                    "__sps": {
                      "jumble": {},
                      "sifting": {}
                    }
                  },
                  "retune": {}
                }
              },
              "sat[1]": {
                "__sps": {
                  "pitch": {
                    "__sps": {
                      "jumble": {},
                      "sifting": {}
                    }
                  },
                  "retune": {}
                }
              },
              "sat[2]": {
                "__sps": {
                  "pitch": {
                    "__sps": {
                      "jumble": {},
                      "sifting": {}
                    }
                  },
                  "retune": {}
                }
              },
              "sat[3]": {
                "__sps": {
                  "pitch": {
                    "__sps": {
                      "jumble": {},
                      "sifting": {}
                    }
                  },
                  "retune": {}
                }
              },
              "sat[4]": {
                "__sps": {
                  "pitch": {
                    "__sps": {
                      "jumble": {},
                      "sifting": {}
                    }
                  },
                  "retune": {}
                }
              },
              "sat[5]": {
                "__sps": {
                  "pitch": {
                    "__sps": {
                      "jumble": {},
                      "sifting": {}
                    }
                  },
                  "retune": {}
                }
              },
              "tempobank": {},
              "values": {}
            },
            "altitude": {
              "value": 0
            },
            "attack": {
              "value": 0
            },
            "azimuth": {
              "value": 0
            },
            "cut": {
              "value": 0
            },
            "elongation": {
              "value": 0
            },
            "magnitude": {
              "value": 0
            },
            "mode": {
              "value": 0
            },
            "onoff": {
              "value": 0
            },
            "q": {
              "value": 0
            },
            "tempo": {
              "value": 100
            }
          },
          "sun": {
            "__sps": {
              "change": {},
              "constrain": {},
              "conversion": {},
              "sunadd": {
                "__sps": {
                  "retune": {}
                }
              },
              "sunadd[1]": {
                "__sps": {
                  "retune": {}
                }
              },
              "suncut": {},
              "sunenv": {},
              "values": {}
            },
            "addtemp": {
              "value": 500
            },
            "altitude": {
              "value": 0
            },
            "attack": {
              "value": 50
            },
            "azimuth": {
              "value": 0
            },
            "cuttemp": {
              "value": 300
            },
            "decay": {
              "value": 400
            },
            "month": {
              "value": 1
            },
            "onoff": {
              "value": 0
            }
          },
          "uranus": {
            "__sps": {
              "change": {},
              "constrain": {},
              "conversion": {},
              "reverb": {
                "__sps": {
                  "audioIn": {
                    "__sps": {
                      "Blur~": {},
                      "CombL~": {},
                      "CombR~": {},
                      "Damp~": {},
                      "Mix~": {},
                      "RoomA~": {},
                      "RoomB~": {},
                      "Shuffle~": {}
                    }
                  },
                  "damp": {},
                  "decay": {},
                  "diff": {},
                  "jitter": {},
                  "mix": {},
                  "size": {}
                },
                "diff": {
                  "value": 100
                },
                "jitter": {
                  "value": 30
                },
                "mix": {
                  "value": 48
                }
              }
            },
            "altitude": {
              "value": 0
            },
            "azimuth": {
              "value": 0
            },
            "decay": {
              "value": 80
            },
            "elongation": {
              "value": 0
            },
            "magnitude": {
              "value": 5.38
            },
            "onoff": {
              "value": 0
            }
          },
          "venus": {
            "__sps": {
              "constrain": {},
              "conversion": {},
              "venoid": {
                "__sps": {
                  "retune": {}
                }
              },
              "venoid[1]": {
                "__sps": {
                  "retune": {}
                }
              },
              "venoid[2]": {
                "__sps": {
                  "retune": {}
                }
              }
            },
            "altitude": {
              "value": 0
            },
            "azimuth": {
              "value": 0
            },
            "elongation": {
              "value": 0
            },
            "magnitude": {
              "value": -2.98
            },
            "onoff": {
              "value": 0
            },
            "rescut": {
              "value": 100
            },
            "tempo": {
              "value": 500
            }
          }
        }
      }
    }
  ],
  "src": [
    {
      "code": "",
      "compression": "zlib",
      "encoding": "base64",
      "type": "wasm"
    }
  ]
}